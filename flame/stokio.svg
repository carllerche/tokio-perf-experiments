<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1142.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1125" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1125" > </text>
<g id="frames">
<g >
<title>inet6_recvmsg (47 samples, 9.48%)</title><rect x="117.1" y="741" width="111.8" height="15.0" fill="rgb(226,82,48)" rx="2" ry="2" />
<text  x="120.06" y="751.5" >inet6_recvmsg</text>
</g>
<g >
<title>ip6_finish_output2 (245 samples, 49.40%)</title><rect x="509.6" y="549" width="582.9" height="15.0" fill="rgb(240,73,11)" rx="2" ry="2" />
<text  x="512.60" y="559.5" >ip6_finish_output2</text>
</g>
<g >
<title>tcp_mstamp_refresh (1 samples, 0.20%)</title><rect x="1021.1" y="309" width="2.4" height="15.0" fill="rgb(231,75,15)" rx="2" ry="2" />
<text  x="1024.09" y="319.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (3 samples, 0.60%)</title><rect x="1052.0" y="421" width="7.2" height="15.0" fill="rgb(247,189,47)" rx="2" ry="2" />
<text  x="1055.02" y="431.5" ></text>
</g>
<g >
<title>resched_curr (4 samples, 0.81%)</title><rect x="949.7" y="69" width="9.5" height="15.0" fill="rgb(243,13,41)" rx="2" ry="2" />
<text  x="952.72" y="79.5" ></text>
</g>
<g >
<title>stokio::runtime::io::Registration::clear_readiness (1 samples, 0.20%)</title><rect x="1171.0" y="869" width="2.3" height="15.0" fill="rgb(254,23,2)" rx="2" ry="2" />
<text  x="1173.97" y="879.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (1 samples, 0.20%)</title><rect x="226.5" y="677" width="2.4" height="15.0" fill="rgb(223,29,19)" rx="2" ry="2" />
<text  x="229.49" y="687.5" ></text>
</g>
<g >
<title>__inet6_lookup_established (14 samples, 2.82%)</title><rect x="576.2" y="341" width="33.3" height="15.0" fill="rgb(231,126,6)" rx="2" ry="2" />
<text  x="579.21" y="351.5" >__..</text>
</g>
<g >
<title>migrate_disable (1 samples, 0.20%)</title><rect x="495.3" y="549" width="2.4" height="15.0" fill="rgb(222,81,42)" rx="2" ry="2" />
<text  x="498.32" y="559.5" ></text>
</g>
<g >
<title>do_softirq (223 samples, 44.96%)</title><rect x="509.6" y="517" width="530.5" height="15.0" fill="rgb(229,50,44)" rx="2" ry="2" />
<text  x="512.60" y="527.5" >do_softirq</text>
</g>
<g >
<title>__sys_recvfrom (54 samples, 10.89%)</title><rect x="107.5" y="773" width="128.5" height="15.0" fill="rgb(231,24,49)" rx="2" ry="2" />
<text  x="110.54" y="783.5" >__sys_recvfrom</text>
</g>
<g >
<title>tcp_push (1 samples, 0.20%)</title><rect x="290.7" y="709" width="2.4" height="15.0" fill="rgb(236,1,51)" rx="2" ry="2" />
<text  x="293.73" y="719.5" ></text>
</g>
<g >
<title>skb_clone_tx_timestamp (1 samples, 0.20%)</title><rect x="1066.3" y="453" width="2.4" height="15.0" fill="rgb(208,14,21)" rx="2" ry="2" />
<text  x="1069.29" y="463.5" ></text>
</g>
<g >
<title>load_elf_binary (4 samples, 0.81%)</title><rect x="1180.5" y="917" width="9.5" height="15.0" fill="rgb(209,99,14)" rx="2" ry="2" />
<text  x="1183.48" y="927.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.20%)</title><rect x="286.0" y="693" width="2.3" height="15.0" fill="rgb(254,190,6)" rx="2" ry="2" />
<text  x="288.97" y="703.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.20%)</title><rect x="205.1" y="613" width="2.4" height="15.0" fill="rgb(244,179,20)" rx="2" ry="2" />
<text  x="208.08" y="623.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.20%)</title><rect x="1021.1" y="293" width="2.4" height="15.0" fill="rgb(222,209,52)" rx="2" ry="2" />
<text  x="1024.09" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 0.60%)</title><rect x="816.5" y="117" width="7.1" height="15.0" fill="rgb(234,45,40)" rx="2" ry="2" />
<text  x="819.49" y="127.5" ></text>
</g>
<g >
<title>autoremove_wake_function (73 samples, 14.72%)</title><rect x="802.2" y="165" width="173.7" height="15.0" fill="rgb(224,194,53)" rx="2" ry="2" />
<text  x="805.22" y="175.5" >autoremove_wake_function</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.20%)</title><rect x="212.2" y="645" width="2.4" height="15.0" fill="rgb(240,218,14)" rx="2" ry="2" />
<text  x="215.22" y="655.5" ></text>
</g>
<g >
<title>tcp_wfree (4 samples, 0.81%)</title><rect x="1068.7" y="453" width="9.5" height="15.0" fill="rgb(234,3,13)" rx="2" ry="2" />
<text  x="1071.67" y="463.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (281 samples, 56.65%)</title><rect x="445.4" y="645" width="668.5" height="15.0" fill="rgb(205,183,6)" rx="2" ry="2" />
<text  x="448.36" y="655.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>skb_release_data (16 samples, 3.23%)</title><rect x="709.4" y="261" width="38.1" height="15.0" fill="rgb(243,92,44)" rx="2" ry="2" />
<text  x="712.44" y="271.5" >skb..</text>
</g>
<g >
<title>__nss_database_lookup (1 samples, 0.20%)</title><rect x="1166.2" y="869" width="2.4" height="15.0" fill="rgb(248,200,14)" rx="2" ry="2" />
<text  x="1169.21" y="879.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (4 samples, 0.81%)</title><rect x="1180.5" y="965" width="9.5" height="15.0" fill="rgb(248,120,20)" rx="2" ry="2" />
<text  x="1183.48" y="975.5" ></text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.20%)</title><rect x="136.1" y="709" width="2.4" height="15.0" fill="rgb(252,78,43)" rx="2" ry="2" />
<text  x="139.09" y="719.5" ></text>
</g>
<g >
<title>cubictcp_acked (3 samples, 0.60%)</title><rect x="673.8" y="293" width="7.1" height="15.0" fill="rgb(233,124,34)" rx="2" ry="2" />
<text  x="676.75" y="303.5" ></text>
</g>
<g >
<title>__entry_text_start (1 samples, 0.20%)</title><rect x="100.4" y="821" width="2.4" height="15.0" fill="rgb(217,59,15)" rx="2" ry="2" />
<text  x="103.40" y="831.5" ></text>
</g>
<g >
<title>ip6_input (205 samples, 41.33%)</title><rect x="547.7" y="389" width="487.7" height="15.0" fill="rgb(249,41,53)" rx="2" ry="2" />
<text  x="550.66" y="399.5" >ip6_input</text>
</g>
<g >
<title>xmit_one.constprop.0 (13 samples, 2.62%)</title><rect x="1049.6" y="485" width="31.0" height="15.0" fill="rgb(240,97,39)" rx="2" ry="2" />
<text  x="1052.64" y="495.5" >xm..</text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 0.60%)</title><rect x="521.5" y="453" width="7.1" height="15.0" fill="rgb(216,95,4)" rx="2" ry="2" />
<text  x="524.49" y="463.5" ></text>
</g>
<g >
<title>tcp_v6_rcv (201 samples, 40.52%)</title><rect x="557.2" y="357" width="478.2" height="15.0" fill="rgb(208,156,39)" rx="2" ry="2" />
<text  x="560.18" y="367.5" >tcp_v6_rcv</text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.20%)</title><rect x="409.7" y="645" width="2.4" height="15.0" fill="rgb(205,193,25)" rx="2" ry="2" />
<text  x="412.68" y="655.5" ></text>
</g>
<g >
<title>enqueue_task (40 samples, 8.06%)</title><rect x="849.8" y="101" width="95.2" height="15.0" fill="rgb(237,112,48)" rx="2" ry="2" />
<text  x="852.80" y="111.5" >enqueue_task</text>
</g>
<g >
<title>tcp_filter (2 samples, 0.40%)</title><rect x="611.9" y="341" width="4.8" height="15.0" fill="rgb(207,22,35)" rx="2" ry="2" />
<text  x="614.90" y="351.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (1 samples, 0.20%)</title><rect x="228.9" y="741" width="2.3" height="15.0" fill="rgb(234,203,9)" rx="2" ry="2" />
<text  x="231.87" y="751.5" ></text>
</g>
<g >
<title>&lt;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (63 samples, 12.70%)</title><rect x="88.5" y="869" width="149.9" height="15.0" fill="rgb(208,188,9)" rx="2" ry="2" />
<text  x="91.51" y="879.5" >&lt;mio::net::tcp::str..</text>
</g>
<g >
<title>exec_binprm (1 samples, 0.20%)</title><rect x="10.0" y="949" width="2.4" height="15.0" fill="rgb(247,229,28)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>_copy_to_iter (1 samples, 0.20%)</title><rect x="209.8" y="645" width="2.4" height="15.0" fill="rgb(236,85,36)" rx="2" ry="2" />
<text  x="212.84" y="655.5" ></text>
</g>
<g >
<title>dst_release (2 samples, 0.40%)</title><rect x="171.8" y="677" width="4.7" height="15.0" fill="rgb(244,86,11)" rx="2" ry="2" />
<text  x="174.77" y="687.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (5 samples, 1.01%)</title><rect x="1023.5" y="309" width="11.9" height="15.0" fill="rgb(244,183,7)" rx="2" ry="2" />
<text  x="1026.47" y="319.5" ></text>
</g>
<g >
<title>inet6_csk_xmit (262 samples, 52.82%)</title><rect x="471.5" y="629" width="623.3" height="15.0" fill="rgb(213,111,42)" rx="2" ry="2" />
<text  x="474.53" y="639.5" >inet6_csk_xmit</text>
</g>
<g >
<title>tcp_clean_rtx_queue.constprop.0 (28 samples, 5.65%)</title><rect x="683.3" y="293" width="66.6" height="15.0" fill="rgb(227,44,42)" rx="2" ry="2" />
<text  x="686.27" y="303.5" >tcp_cle..</text>
</g>
<g >
<title>inet6_csk_route_socket (1 samples, 0.20%)</title><rect x="473.9" y="613" width="2.4" height="15.0" fill="rgb(239,83,47)" rx="2" ry="2" />
<text  x="476.91" y="623.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (1 samples, 0.20%)</title><rect x="109.9" y="757" width="2.4" height="15.0" fill="rgb(208,195,3)" rx="2" ry="2" />
<text  x="112.92" y="767.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (2 samples, 0.40%)</title><rect x="202.7" y="629" width="4.8" height="15.0" fill="rgb(211,24,34)" rx="2" ry="2" />
<text  x="205.70" y="639.5" ></text>
</g>
<g >
<title>_start (491 samples, 98.99%)</title><rect x="12.4" y="1061" width="1168.1" height="15.0" fill="rgb(230,50,22)" rx="2" ry="2" />
<text  x="15.38" y="1071.5" >_start</text>
</g>
<g >
<title>sk_reset_timer (3 samples, 0.60%)</title><rect x="652.3" y="277" width="7.2" height="15.0" fill="rgb(237,108,24)" rx="2" ry="2" />
<text  x="655.34" y="287.5" ></text>
</g>
<g >
<title>nf_hook_slow (1 samples, 0.20%)</title><rect x="1092.5" y="581" width="2.3" height="15.0" fill="rgb(245,86,2)" rx="2" ry="2" />
<text  x="1095.46" y="591.5" ></text>
</g>
<g >
<title>__cond_resched (1 samples, 0.20%)</title><rect x="136.1" y="693" width="2.4" height="15.0" fill="rgb(240,218,37)" rx="2" ry="2" />
<text  x="139.09" y="703.5" ></text>
</g>
<g >
<title>free_pgd_range (1 samples, 0.20%)</title><rect x="10.0" y="869" width="2.4" height="15.0" fill="rgb(233,210,28)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.20%)</title><rect x="1049.6" y="421" width="2.4" height="15.0" fill="rgb(210,16,19)" rx="2" ry="2" />
<text  x="1052.64" y="431.5" ></text>
</g>
<g >
<title>sock_put (1 samples, 0.20%)</title><rect x="609.5" y="341" width="2.4" height="15.0" fill="rgb(249,197,10)" rx="2" ry="2" />
<text  x="612.52" y="351.5" ></text>
</g>
<g >
<title>tcp_data_ready (112 samples, 22.58%)</title><rect x="754.6" y="309" width="266.5" height="15.0" fill="rgb(225,47,36)" rx="2" ry="2" />
<text  x="757.64" y="319.5" >tcp_data_ready</text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.20%)</title><rect x="473.9" y="597" width="2.4" height="15.0" fill="rgb(217,116,44)" rx="2" ry="2" />
<text  x="476.91" y="607.5" ></text>
</g>
<g >
<title>tcp_ack (38 samples, 7.66%)</title><rect x="664.2" y="309" width="90.4" height="15.0" fill="rgb(234,159,26)" rx="2" ry="2" />
<text  x="667.23" y="319.5" >tcp_ack</text>
</g>
<g >
<title>apparmor_socket_sendmsg (1 samples, 0.20%)</title><rect x="271.7" y="741" width="2.4" height="15.0" fill="rgb(216,164,54)" rx="2" ry="2" />
<text  x="274.69" y="751.5" ></text>
</g>
<g >
<title>__kfree_skb (21 samples, 4.23%)</title><rect x="697.5" y="277" width="50.0" height="15.0" fill="rgb(252,75,4)" rx="2" ry="2" />
<text  x="700.54" y="287.5" >__kfr..</text>
</g>
<g >
<title>main (491 samples, 98.99%)</title><rect x="12.4" y="1013" width="1168.1" height="15.0" fill="rgb(222,71,6)" rx="2" ry="2" />
<text  x="15.38" y="1023.5" >main</text>
</g>
<g >
<title>tcp_sendmsg_locked (1 samples, 0.20%)</title><rect x="1140.0" y="725" width="2.4" height="15.0" fill="rgb(224,15,10)" rx="2" ry="2" />
<text  x="1143.04" y="735.5" ></text>
</g>
<g >
<title>tcp_poll (2 samples, 0.40%)</title><rect x="57.6" y="725" width="4.7" height="15.0" fill="rgb(242,207,17)" rx="2" ry="2" />
<text  x="60.58" y="735.5" ></text>
</g>
<g >
<title>kfree_skbmem (3 samples, 0.60%)</title><rect x="176.5" y="677" width="7.2" height="15.0" fill="rgb(217,181,18)" rx="2" ry="2" />
<text  x="179.53" y="687.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.20%)</title><rect x="10.0" y="1061" width="2.4" height="15.0" fill="rgb(224,188,23)" rx="2" ry="2" />
<text  x="13.00" y="1071.5" ></text>
</g>
<g >
<title>tcp_recv_timestamp (2 samples, 0.40%)</title><rect x="143.2" y="709" width="4.8" height="15.0" fill="rgb(242,172,33)" rx="2" ry="2" />
<text  x="146.23" y="719.5" ></text>
</g>
<g >
<title>slab_free_freelist_hook.constprop.0 (2 samples, 0.40%)</title><rect x="704.7" y="229" width="4.7" height="15.0" fill="rgb(222,221,51)" rx="2" ry="2" />
<text  x="707.68" y="239.5" ></text>
</g>
<g >
<title>ksize (12 samples, 2.42%)</title><rect x="376.4" y="661" width="28.5" height="15.0" fill="rgb(233,229,46)" rx="2" ry="2" />
<text  x="379.37" y="671.5" >ks..</text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.20%)</title><rect x="10.0" y="917" width="2.4" height="15.0" fill="rgb(219,139,7)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>sk_page_frag_refill (1 samples, 0.20%)</title><rect x="288.3" y="709" width="2.4" height="15.0" fill="rgb(246,19,44)" rx="2" ry="2" />
<text  x="291.35" y="719.5" ></text>
</g>
<g >
<title>&lt;stokio::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (6 samples, 1.21%)</title><rect x="1151.9" y="869" width="14.3" height="15.0" fill="rgb(215,10,38)" rx="2" ry="2" />
<text  x="1154.94" y="879.5" ></text>
</g>
<g >
<title>skb_release_head_state (5 samples, 1.01%)</title><rect x="186.0" y="677" width="11.9" height="15.0" fill="rgb(239,46,42)" rx="2" ry="2" />
<text  x="189.05" y="687.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (111 samples, 22.38%)</title><rect x="757.0" y="261" width="264.1" height="15.0" fill="rgb(231,60,18)" rx="2" ry="2" />
<text  x="760.02" y="271.5" >__wake_up_common_lock</text>
</g>
<g >
<title>__wake_up_common (108 samples, 21.77%)</title><rect x="757.0" y="245" width="257.0" height="15.0" fill="rgb(239,95,30)" rx="2" ry="2" />
<text  x="760.02" y="255.5" >__wake_up_common</text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.20%)</title><rect x="1144.8" y="773" width="2.4" height="15.0" fill="rgb(250,76,39)" rx="2" ry="2" />
<text  x="1147.80" y="783.5" ></text>
</g>
<g >
<title>__napi_poll (217 samples, 43.75%)</title><rect x="521.5" y="469" width="516.2" height="15.0" fill="rgb(252,229,39)" rx="2" ry="2" />
<text  x="524.49" y="479.5" >__napi_poll</text>
</g>
<g >
<title>__mod_timer (3 samples, 0.60%)</title><rect x="652.3" y="245" width="7.2" height="15.0" fill="rgb(226,100,2)" rx="2" ry="2" />
<text  x="655.34" y="255.5" ></text>
</g>
<g >
<title>tcp_current_mss (4 samples, 0.81%)</title><rect x="1130.5" y="677" width="9.5" height="15.0" fill="rgb(213,86,17)" rx="2" ry="2" />
<text  x="1133.52" y="687.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (34 samples, 6.85%)</title><rect x="148.0" y="709" width="80.9" height="15.0" fill="rgb(253,113,50)" rx="2" ry="2" />
<text  x="150.98" y="719.5" >tcp_recvm..</text>
</g>
<g >
<title>stokio::runtime::task::vtable::poll (3 samples, 0.60%)</title><rect x="1173.3" y="901" width="7.2" height="15.0" fill="rgb(221,82,35)" rx="2" ry="2" />
<text  x="1176.35" y="911.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.20%)</title><rect x="1149.6" y="821" width="2.3" height="15.0" fill="rgb(250,129,11)" rx="2" ry="2" />
<text  x="1152.56" y="831.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (1 samples, 0.20%)</title><rect x="1142.4" y="741" width="2.4" height="15.0" fill="rgb(243,72,53)" rx="2" ry="2" />
<text  x="1145.42" y="751.5" ></text>
</g>
<g >
<title>kmem_cache_free (5 samples, 1.01%)</title><rect x="697.5" y="245" width="11.9" height="15.0" fill="rgb(210,21,25)" rx="2" ry="2" />
<text  x="700.54" y="255.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.20%)</title><rect x="62.3" y="821" width="2.4" height="15.0" fill="rgb(214,52,52)" rx="2" ry="2" />
<text  x="65.34" y="831.5" ></text>
</g>
<g >
<title>ip6_rcv_core (1 samples, 0.20%)</title><rect x="1035.4" y="389" width="2.3" height="15.0" fill="rgb(225,219,4)" rx="2" ry="2" />
<text  x="1038.36" y="399.5" ></text>
</g>
<g >
<title>skb_free_head (6 samples, 1.21%)</title><rect x="733.2" y="245" width="14.3" height="15.0" fill="rgb(231,211,0)" rx="2" ry="2" />
<text  x="736.23" y="255.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (1 samples, 0.20%)</title><rect x="228.9" y="725" width="2.3" height="15.0" fill="rgb(247,195,31)" rx="2" ry="2" />
<text  x="231.87" y="735.5" ></text>
</g>
<g >
<title>tcp_mtu_probe (1 samples, 0.20%)</title><rect x="1125.8" y="645" width="2.3" height="15.0" fill="rgb(230,154,31)" rx="2" ry="2" />
<text  x="1128.77" y="655.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (2 samples, 0.40%)</title><rect x="231.2" y="757" width="4.8" height="15.0" fill="rgb(248,86,21)" rx="2" ry="2" />
<text  x="234.25" y="767.5" ></text>
</g>
<g >
<title>__check_object_size (2 samples, 0.40%)</title><rect x="407.3" y="677" width="4.8" height="15.0" fill="rgb(222,182,13)" rx="2" ry="2" />
<text  x="410.30" y="687.5" ></text>
</g>
<g >
<title>ttwu_do_wakeup (6 samples, 1.21%)</title><rect x="945.0" y="101" width="14.2" height="15.0" fill="rgb(217,143,41)" rx="2" ry="2" />
<text  x="947.96" y="111.5" ></text>
</g>
<g >
<title>memcg_slab_free_hook (1 samples, 0.20%)</title><rect x="702.3" y="229" width="2.4" height="15.0" fill="rgb(229,193,31)" rx="2" ry="2" />
<text  x="705.30" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (375 samples, 75.60%)</title><rect x="255.0" y="805" width="892.2" height="15.0" fill="rgb(206,100,36)" rx="2" ry="2" />
<text  x="258.04" y="815.5" >do_syscall_64</text>
</g>
<g >
<title>apparmor_ipv6_postroute (1 samples, 0.20%)</title><rect x="488.2" y="581" width="2.4" height="15.0" fill="rgb(227,58,30)" rx="2" ry="2" />
<text  x="491.19" y="591.5" ></text>
</g>
<g >
<title>netif_skb_features (1 samples, 0.20%)</title><rect x="1082.9" y="485" width="2.4" height="15.0" fill="rgb(209,131,7)" rx="2" ry="2" />
<text  x="1085.94" y="495.5" ></text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.20%)</title><rect x="10.0" y="933" width="2.4" height="15.0" fill="rgb(212,128,17)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (3 samples, 0.60%)</title><rect x="1014.0" y="245" width="7.1" height="15.0" fill="rgb(239,72,27)" rx="2" ry="2" />
<text  x="1016.95" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (7 samples, 1.41%)</title><rect x="823.6" y="117" width="16.7" height="15.0" fill="rgb(219,196,31)" rx="2" ry="2" />
<text  x="826.63" y="127.5" ></text>
</g>
<g >
<title>tcp_v6_do_rcv (176 samples, 35.48%)</title><rect x="616.7" y="341" width="418.7" height="15.0" fill="rgb(217,76,7)" rx="2" ry="2" />
<text  x="619.65" y="351.5" >tcp_v6_do_rcv</text>
</g>
<g >
<title>ipv6_rcv (207 samples, 41.73%)</title><rect x="545.3" y="405" width="492.4" height="15.0" fill="rgb(212,20,1)" rx="2" ry="2" />
<text  x="548.28" y="415.5" >ipv6_rcv</text>
</g>
<g >
<title>tcp_cleanup_rbuf (1 samples, 0.20%)</title><rect x="140.8" y="709" width="2.4" height="15.0" fill="rgb(240,35,43)" rx="2" ry="2" />
<text  x="143.85" y="719.5" ></text>
</g>
<g >
<title>__check_object_size (3 samples, 0.60%)</title><rect x="202.7" y="645" width="7.1" height="15.0" fill="rgb(222,140,39)" rx="2" ry="2" />
<text  x="205.70" y="655.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.20%)</title><rect x="942.6" y="53" width="2.4" height="15.0" fill="rgb(244,191,11)" rx="2" ry="2" />
<text  x="945.58" y="63.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.20%)</title><rect x="507.2" y="549" width="2.4" height="15.0" fill="rgb(212,1,4)" rx="2" ry="2" />
<text  x="510.22" y="559.5" ></text>
</g>
<g >
<title>migrate_enable (1 samples, 0.20%)</title><rect x="497.7" y="549" width="2.4" height="15.0" fill="rgb(227,0,50)" rx="2" ry="2" />
<text  x="500.70" y="559.5" ></text>
</g>
<g >
<title>tcp_rate_gen (1 samples, 0.20%)</title><rect x="749.9" y="293" width="2.4" height="15.0" fill="rgb(250,0,25)" rx="2" ry="2" />
<text  x="752.88" y="303.5" ></text>
</g>
<g >
<title>__build_skb_around (1 samples, 0.20%)</title><rect x="331.2" y="661" width="2.3" height="15.0" fill="rgb(218,60,35)" rx="2" ry="2" />
<text  x="334.17" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (374 samples, 75.40%)</title><rect x="255.0" y="789" width="889.8" height="15.0" fill="rgb(209,216,33)" rx="2" ry="2" />
<text  x="258.04" y="799.5" >__x64_sys_sendto</text>
</g>
<g >
<title>inet6_sendmsg (365 samples, 73.59%)</title><rect x="274.1" y="741" width="868.3" height="15.0" fill="rgb(246,44,18)" rx="2" ry="2" />
<text  x="277.07" y="751.5" >inet6_sendmsg</text>
</g>
<g >
<title>__wake_up_common (76 samples, 15.32%)</title><rect x="795.1" y="181" width="180.8" height="15.0" fill="rgb(226,148,4)" rx="2" ry="2" />
<text  x="798.08" y="191.5" >__wake_up_common</text>
</g>
<g >
<title>__check_object_size.part.0 (2 samples, 0.40%)</title><rect x="407.3" y="661" width="4.8" height="15.0" fill="rgb(215,188,49)" rx="2" ry="2" />
<text  x="410.30" y="671.5" ></text>
</g>
<g >
<title>free_pud_range (1 samples, 0.20%)</title><rect x="10.0" y="837" width="2.4" height="15.0" fill="rgb(239,4,27)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.81%)</title><rect x="1180.5" y="853" width="9.5" height="15.0" fill="rgb(246,84,11)" rx="2" ry="2" />
<text  x="1183.48" y="863.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (22 samples, 4.44%)</title><rect x="1040.1" y="517" width="52.4" height="15.0" fill="rgb(232,204,18)" rx="2" ry="2" />
<text  x="1043.12" y="527.5" >__dev..</text>
</g>
<g >
<title>hello_world::main (491 samples, 98.99%)</title><rect x="12.4" y="949" width="1168.1" height="15.0" fill="rgb(221,32,38)" rx="2" ry="2" />
<text  x="15.38" y="959.5" >hello_world::main</text>
</g>
<g >
<title>tcp_push (295 samples, 59.48%)</title><rect x="428.7" y="693" width="701.8" height="15.0" fill="rgb(207,108,16)" rx="2" ry="2" />
<text  x="431.71" y="703.5" >tcp_push</text>
</g>
<g >
<title>ip6_xmit (260 samples, 52.42%)</title><rect x="476.3" y="613" width="618.5" height="15.0" fill="rgb(253,216,44)" rx="2" ry="2" />
<text  x="479.29" y="623.5" >ip6_xmit</text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.81%)</title><rect x="1180.5" y="837" width="9.5" height="15.0" fill="rgb(206,18,34)" rx="2" ry="2" />
<text  x="1183.48" y="847.5" ></text>
</g>
<g >
<title>__x64_sys_execve (4 samples, 0.81%)</title><rect x="1180.5" y="1013" width="9.5" height="15.0" fill="rgb(227,30,33)" rx="2" ry="2" />
<text  x="1183.48" y="1023.5" ></text>
</g>
<g >
<title>tcp_write_xmit (294 samples, 59.27%)</title><rect x="431.1" y="661" width="699.4" height="15.0" fill="rgb(250,8,23)" rx="2" ry="2" />
<text  x="434.09" y="671.5" >tcp_write_xmit</text>
</g>
<g >
<title>sk_stream_alloc_skb (35 samples, 7.06%)</title><rect x="321.7" y="693" width="83.2" height="15.0" fill="rgb(207,46,32)" rx="2" ry="2" />
<text  x="324.65" y="703.5" >sk_stream..</text>
</g>
<g >
<title>do_syscall_64 (18 samples, 3.63%)</title><rect x="21.9" y="837" width="42.8" height="15.0" fill="rgb(219,91,20)" rx="2" ry="2" />
<text  x="24.90" y="847.5" >do_s..</text>
</g>
<g >
<title>__tcp_push_pending_frames (295 samples, 59.48%)</title><rect x="428.7" y="677" width="701.8" height="15.0" fill="rgb(227,12,53)" rx="2" ry="2" />
<text  x="431.71" y="687.5" >__tcp_push_pending_frames</text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.20%)</title><rect x="278.8" y="709" width="2.4" height="15.0" fill="rgb(216,68,25)" rx="2" ry="2" />
<text  x="281.83" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (1 samples, 0.20%)</title><rect x="1147.2" y="821" width="2.4" height="15.0" fill="rgb(237,174,21)" rx="2" ry="2" />
<text  x="1150.18" y="831.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.20%)</title><rect x="1116.2" y="645" width="2.4" height="15.0" fill="rgb(210,168,22)" rx="2" ry="2" />
<text  x="1119.25" y="655.5" ></text>
</g>
<g >
<title>rcu_read_unlock_strict (1 samples, 0.20%)</title><rect x="1094.8" y="629" width="2.4" height="15.0" fill="rgb(248,80,47)" rx="2" ry="2" />
<text  x="1097.84" y="639.5" ></text>
</g>
<g >
<title>ip6_output (255 samples, 51.41%)</title><rect x="488.2" y="597" width="606.6" height="15.0" fill="rgb(236,217,54)" rx="2" ry="2" />
<text  x="491.19" y="607.5" >ip6_output</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="10.0" y="1029" width="2.4" height="15.0" fill="rgb(249,160,34)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" ></text>
</g>
<g >
<title>all (496 samples, 100%)</title><rect x="10.0" y="1093" width="1180.0" height="15.0" fill="rgb(207,114,22)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" ></text>
</g>
<g >
<title>__alloc_skb (32 samples, 6.45%)</title><rect x="328.8" y="677" width="76.1" height="15.0" fill="rgb(252,124,3)" rx="2" ry="2" />
<text  x="331.79" y="687.5" >__alloc_..</text>
</g>
<g >
<title>netif_rx (6 samples, 1.21%)</title><rect x="1049.6" y="453" width="14.3" height="15.0" fill="rgb(246,49,34)" rx="2" ry="2" />
<text  x="1052.64" y="463.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.20%)</title><rect x="1037.7" y="501" width="2.4" height="15.0" fill="rgb(242,79,6)" rx="2" ry="2" />
<text  x="1040.74" y="511.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 0.20%)</title><rect x="138.5" y="709" width="2.3" height="15.0" fill="rgb(239,93,48)" rx="2" ry="2" />
<text  x="141.47" y="719.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (3 samples, 0.60%)</title><rect x="214.6" y="645" width="7.1" height="15.0" fill="rgb(246,150,4)" rx="2" ry="2" />
<text  x="217.60" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="10.0" y="1045" width="2.4" height="15.0" fill="rgb(215,174,38)" rx="2" ry="2" />
<text  x="13.00" y="1055.5" ></text>
</g>
<g >
<title>__copy_skb_header (2 samples, 0.40%)</title><rect x="1106.7" y="597" width="4.8" height="15.0" fill="rgb(227,130,48)" rx="2" ry="2" />
<text  x="1109.73" y="607.5" ></text>
</g>
<g >
<title>perf_event_exec (4 samples, 0.81%)</title><rect x="1180.5" y="885" width="9.5" height="15.0" fill="rgb(228,108,8)" rx="2" ry="2" />
<text  x="1183.48" y="895.5" ></text>
</g>
<g >
<title>select_task_rq_fair (4 samples, 0.81%)</title><rect x="840.3" y="117" width="9.5" height="15.0" fill="rgb(218,126,25)" rx="2" ry="2" />
<text  x="843.28" y="127.5" ></text>
</g>
<g >
<title>__netif_receive_skb (213 samples, 42.94%)</title><rect x="531.0" y="437" width="506.7" height="15.0" fill="rgb(240,155,37)" rx="2" ry="2" />
<text  x="534.01" y="447.5" >__netif_receive_skb</text>
</g>
<g >
<title>reweight_entity (1 samples, 0.20%)</title><rect x="887.9" y="37" width="2.3" height="15.0" fill="rgb(243,27,25)" rx="2" ry="2" />
<text  x="890.86" y="47.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (2 samples, 0.40%)</title><rect x="540.5" y="405" width="4.8" height="15.0" fill="rgb(245,170,30)" rx="2" ry="2" />
<text  x="543.52" y="415.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (1 samples, 0.20%)</title><rect x="343.1" y="629" width="2.3" height="15.0" fill="rgb(209,97,2)" rx="2" ry="2" />
<text  x="346.06" y="639.5" ></text>
</g>
<g >
<title>skb_entail (4 samples, 0.81%)</title><rect x="419.2" y="693" width="9.5" height="15.0" fill="rgb(207,166,48)" rx="2" ry="2" />
<text  x="422.19" y="703.5" ></text>
</g>
<g >
<title>__libc_start_main (491 samples, 98.99%)</title><rect x="12.4" y="1045" width="1168.1" height="15.0" fill="rgb(242,216,34)" rx="2" ry="2" />
<text  x="15.38" y="1055.5" >__libc_start_main</text>
</g>
<g >
<title>ep_send_events (13 samples, 2.62%)</title><rect x="31.4" y="773" width="30.9" height="15.0" fill="rgb(216,173,43)" rx="2" ry="2" />
<text  x="34.41" y="783.5" >ep..</text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.20%)</title><rect x="138.5" y="693" width="2.3" height="15.0" fill="rgb(241,164,47)" rx="2" ry="2" />
<text  x="141.47" y="703.5" ></text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.20%)</title><rect x="1113.9" y="645" width="2.3" height="15.0" fill="rgb(210,159,6)" rx="2" ry="2" />
<text  x="1116.87" y="655.5" ></text>
</g>
<g >
<title>netif_rx_internal (6 samples, 1.21%)</title><rect x="1049.6" y="437" width="14.3" height="15.0" fill="rgb(238,176,44)" rx="2" ry="2" />
<text  x="1052.64" y="447.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (4 samples, 0.81%)</title><rect x="975.9" y="181" width="9.5" height="15.0" fill="rgb(233,187,39)" rx="2" ry="2" />
<text  x="978.89" y="191.5" ></text>
</g>
<g >
<title>tcp_release_cb (1 samples, 0.20%)</title><rect x="293.1" y="709" width="2.4" height="15.0" fill="rgb(220,223,51)" rx="2" ry="2" />
<text  x="296.10" y="719.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (3 samples, 0.60%)</title><rect x="1118.6" y="645" width="7.2" height="15.0" fill="rgb(210,83,37)" rx="2" ry="2" />
<text  x="1121.63" y="655.5" ></text>
</g>
<g >
<title>hello_world (492 samples, 99.19%)</title><rect x="10.0" y="1077" width="1170.5" height="15.0" fill="rgb(253,225,11)" rx="2" ry="2" />
<text  x="13.00" y="1087.5" >hello_world</text>
</g>
<g >
<title>sock_sendmsg (371 samples, 74.80%)</title><rect x="262.2" y="757" width="882.6" height="15.0" fill="rgb(229,102,47)" rx="2" ry="2" />
<text  x="265.18" y="767.5" >sock_sendmsg</text>
</g>
<g >
<title>_raw_spin_lock_bh (5 samples, 1.01%)</title><rect x="124.2" y="709" width="11.9" height="15.0" fill="rgb(224,175,22)" rx="2" ry="2" />
<text  x="127.19" y="719.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.20%)</title><rect x="340.7" y="629" width="2.4" height="15.0" fill="rgb(237,135,35)" rx="2" ry="2" />
<text  x="343.69" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.20%)</title><rect x="10.0" y="1013" width="2.4" height="15.0" fill="rgb(211,198,48)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>net_rx_action (217 samples, 43.75%)</title><rect x="521.5" y="485" width="516.2" height="15.0" fill="rgb(245,184,27)" rx="2" ry="2" />
<text  x="524.49" y="495.5" >net_rx_action</text>
</g>
<g >
<title>ep_poll_callback (98 samples, 19.76%)</title><rect x="780.8" y="229" width="233.2" height="15.0" fill="rgb(205,197,8)" rx="2" ry="2" />
<text  x="783.81" y="239.5" >ep_poll_callback</text>
</g>
<g >
<title>enqueue_entity (13 samples, 2.62%)</title><rect x="866.5" y="69" width="30.9" height="15.0" fill="rgb(230,167,47)" rx="2" ry="2" />
<text  x="869.45" y="79.5" >en..</text>
</g>
<g >
<title>do_epoll_wait (17 samples, 3.43%)</title><rect x="21.9" y="805" width="40.4" height="15.0" fill="rgb(217,180,18)" rx="2" ry="2" />
<text  x="24.90" y="815.5" >do_..</text>
</g>
<g >
<title>sock_def_readable (1 samples, 0.20%)</title><rect x="661.9" y="309" width="2.3" height="15.0" fill="rgb(244,186,29)" rx="2" ry="2" />
<text  x="664.85" y="319.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (1 samples, 0.20%)</title><rect x="614.3" y="325" width="2.4" height="15.0" fill="rgb(252,3,14)" rx="2" ry="2" />
<text  x="617.27" y="335.5" ></text>
</g>
<g >
<title>search_binary_handler (4 samples, 0.81%)</title><rect x="1180.5" y="933" width="9.5" height="15.0" fill="rgb(209,11,0)" rx="2" ry="2" />
<text  x="1183.48" y="943.5" ></text>
</g>
<g >
<title>exec_binprm (4 samples, 0.81%)</title><rect x="1180.5" y="949" width="9.5" height="15.0" fill="rgb(238,88,37)" rx="2" ry="2" />
<text  x="1183.48" y="959.5" ></text>
</g>
<g >
<title>cubictcp_cong_avoid (1 samples, 0.20%)</title><rect x="659.5" y="309" width="2.4" height="15.0" fill="rgb(234,18,28)" rx="2" ry="2" />
<text  x="662.48" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (54 samples, 10.89%)</title><rect x="107.5" y="789" width="128.5" height="15.0" fill="rgb(239,49,11)" rx="2" ry="2" />
<text  x="110.54" y="799.5" >__x64_sys_recvfrom</text>
</g>
<g >
<title>setup_arg_pages (1 samples, 0.20%)</title><rect x="10.0" y="901" width="2.4" height="15.0" fill="rgb(250,12,30)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.20%)</title><rect x="942.6" y="69" width="2.4" height="15.0" fill="rgb(219,188,12)" rx="2" ry="2" />
<text  x="945.58" y="79.5" ></text>
</g>
<g >
<title>tcp_rcv_established (173 samples, 34.88%)</title><rect x="623.8" y="325" width="411.6" height="15.0" fill="rgb(250,171,9)" rx="2" ry="2" />
<text  x="626.79" y="335.5" >tcp_rcv_established</text>
</g>
<g >
<title>sk_page_frag_refill (1 samples, 0.20%)</title><rect x="319.3" y="693" width="2.4" height="15.0" fill="rgb(230,209,5)" rx="2" ry="2" />
<text  x="322.27" y="703.5" ></text>
</g>
<g >
<title>_copy_from_iter (1 samples, 0.20%)</title><rect x="412.1" y="677" width="2.3" height="15.0" fill="rgb(250,218,53)" rx="2" ry="2" />
<text  x="415.06" y="687.5" ></text>
</g>
<g >
<title>default_wake_function (73 samples, 14.72%)</title><rect x="802.2" y="149" width="173.7" height="15.0" fill="rgb(229,84,12)" rx="2" ry="2" />
<text  x="805.22" y="159.5" >default_wake_function</text>
</g>
<g >
<title>stokio::runtime::scheduler::Scheduler::waker_to_task (1 samples, 0.20%)</title><rect x="1163.8" y="853" width="2.4" height="15.0" fill="rgb(222,144,49)" rx="2" ry="2" />
<text  x="1166.83" y="863.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (10 samples, 2.02%)</title><rect x="38.5" y="757" width="23.8" height="15.0" fill="rgb(235,222,1)" rx="2" ry="2" />
<text  x="41.55" y="767.5" >e..</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.20%)</title><rect x="554.8" y="357" width="2.4" height="15.0" fill="rgb(232,26,12)" rx="2" ry="2" />
<text  x="557.80" y="367.5" ></text>
</g>
<g >
<title>dev_queue_xmit (22 samples, 4.44%)</title><rect x="1040.1" y="533" width="52.4" height="15.0" fill="rgb(216,142,35)" rx="2" ry="2" />
<text  x="1043.12" y="543.5" >dev_q..</text>
</g>
<g >
<title>__wake_up (81 samples, 16.33%)</title><rect x="795.1" y="213" width="192.7" height="15.0" fill="rgb(249,14,48)" rx="2" ry="2" />
<text  x="798.08" y="223.5" >__wake_up</text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.20%)</title><rect x="1144.8" y="789" width="2.4" height="15.0" fill="rgb(241,11,11)" rx="2" ry="2" />
<text  x="1147.80" y="799.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (223 samples, 44.96%)</title><rect x="509.6" y="533" width="530.5" height="15.0" fill="rgb(240,168,36)" rx="2" ry="2" />
<text  x="512.60" y="543.5" >__local_bh_enable_ip</text>
</g>
<g >
<title>__slab_free (2 samples, 0.40%)</title><rect x="697.5" y="229" width="4.8" height="15.0" fill="rgb(226,20,40)" rx="2" ry="2" />
<text  x="700.54" y="239.5" ></text>
</g>
<g >
<title>_raw_read_lock_irqsave (11 samples, 2.22%)</title><rect x="987.8" y="213" width="26.2" height="15.0" fill="rgb(214,51,49)" rx="2" ry="2" />
<text  x="990.78" y="223.5" >_..</text>
</g>
<g >
<title>kfree (6 samples, 1.21%)</title><rect x="733.2" y="229" width="14.3" height="15.0" fill="rgb(254,84,9)" rx="2" ry="2" />
<text  x="736.23" y="239.5" ></text>
</g>
<g >
<title>tcp_options_write (1 samples, 0.20%)</title><rect x="1111.5" y="629" width="2.4" height="15.0" fill="rgb(233,117,4)" rx="2" ry="2" />
<text  x="1114.49" y="639.5" ></text>
</g>
<g >
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.60%)</title><rect x="492.9" y="565" width="7.2" height="15.0" fill="rgb(206,33,53)" rx="2" ry="2" />
<text  x="495.94" y="575.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (13 samples, 2.62%)</title><rect x="1049.6" y="501" width="31.0" height="15.0" fill="rgb(205,170,37)" rx="2" ry="2" />
<text  x="1052.64" y="511.5" >de..</text>
</g>
<g >
<title>ep_item_poll.isra.0 (1 samples, 0.20%)</title><rect x="29.0" y="773" width="2.4" height="15.0" fill="rgb(225,133,22)" rx="2" ry="2" />
<text  x="32.03" y="783.5" ></text>
</g>
<g >
<title>update_cfs_group (1 samples, 0.20%)</title><rect x="887.9" y="53" width="2.3" height="15.0" fill="rgb(241,54,37)" rx="2" ry="2" />
<text  x="890.86" y="63.5" ></text>
</g>
<g >
<title>sk_free (1 samples, 0.20%)</title><rect x="1075.8" y="437" width="2.4" height="15.0" fill="rgb(247,75,26)" rx="2" ry="2" />
<text  x="1078.81" y="447.5" ></text>
</g>
<g >
<title>__libc_init_first (491 samples, 98.99%)</title><rect x="12.4" y="1029" width="1168.1" height="15.0" fill="rgb(246,3,34)" rx="2" ry="2" />
<text  x="15.38" y="1039.5" >__libc_init_first</text>
</g>
<g >
<title>loopback_xmit (12 samples, 2.42%)</title><rect x="1049.6" y="469" width="28.6" height="15.0" fill="rgb(206,43,0)" rx="2" ry="2" />
<text  x="1052.64" y="479.5" >lo..</text>
</g>
<g >
<title>apparmor_socket_recvmsg (2 samples, 0.40%)</title><rect x="112.3" y="741" width="4.8" height="15.0" fill="rgb(250,109,27)" rx="2" ry="2" />
<text  x="115.30" y="751.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (17 samples, 3.43%)</title><rect x="21.9" y="821" width="40.4" height="15.0" fill="rgb(241,154,46)" rx="2" ry="2" />
<text  x="24.90" y="831.5" >__x..</text>
</g>
<g >
<title>memset_erms (8 samples, 1.61%)</title><rect x="350.2" y="645" width="19.0" height="15.0" fill="rgb(219,213,46)" rx="2" ry="2" />
<text  x="353.20" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (56 samples, 11.29%)</title><rect x="105.2" y="805" width="133.2" height="15.0" fill="rgb(246,190,0)" rx="2" ry="2" />
<text  x="108.16" y="815.5" >do_syscall_64</text>
</g>
<g >
<title>shift_arg_pages (1 samples, 0.20%)</title><rect x="10.0" y="885" width="2.4" height="15.0" fill="rgb(249,84,17)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (212 samples, 42.74%)</title><rect x="533.4" y="421" width="504.3" height="15.0" fill="rgb(212,90,46)" rx="2" ry="2" />
<text  x="536.39" y="431.5" >__netif_receive_skb_one_core</text>
</g>
<g >
<title>sock_poll (10 samples, 2.02%)</title><rect x="38.5" y="741" width="23.8" height="15.0" fill="rgb(215,142,47)" rx="2" ry="2" />
<text  x="41.55" y="751.5" >s..</text>
</g>
<g >
<title>sock_recvmsg (50 samples, 10.08%)</title><rect x="112.3" y="757" width="118.9" height="15.0" fill="rgb(242,180,20)" rx="2" ry="2" />
<text  x="115.30" y="767.5" >sock_recvmsg</text>
</g>
<g >
<title>skb_copy_datagram_iter (10 samples, 2.02%)</title><rect x="197.9" y="693" width="23.8" height="15.0" fill="rgb(206,0,3)" rx="2" ry="2" />
<text  x="200.94" y="703.5" >s..</text>
</g>
<g >
<title>__wake_up_sync_key (111 samples, 22.38%)</title><rect x="757.0" y="277" width="264.1" height="15.0" fill="rgb(237,134,21)" rx="2" ry="2" />
<text  x="760.02" y="287.5" >__wake_up_sync_key</text>
</g>
<g >
<title>__mod_timer (1 samples, 0.20%)</title><rect x="1128.1" y="613" width="2.4" height="15.0" fill="rgb(246,111,23)" rx="2" ry="2" />
<text  x="1131.15" y="623.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.81%)</title><rect x="1180.5" y="1061" width="9.5" height="15.0" fill="rgb(244,195,49)" rx="2" ry="2" />
<text  x="1183.48" y="1071.5" ></text>
</g>
<g >
<title>stokio::runtime::io::ready::Ready::intersection (2 samples, 0.40%)</title><rect x="1159.1" y="853" width="4.7" height="15.0" fill="rgb(230,85,37)" rx="2" ry="2" />
<text  x="1162.07" y="863.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.81%)</title><rect x="1180.5" y="1045" width="9.5" height="15.0" fill="rgb(213,171,45)" rx="2" ry="2" />
<text  x="1183.48" y="1055.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (8 samples, 1.61%)</title><rect x="202.7" y="661" width="19.0" height="15.0" fill="rgb(207,91,14)" rx="2" ry="2" />
<text  x="205.70" y="671.5" ></text>
</g>
<g >
<title>tcp_update_pacing_rate (1 samples, 0.20%)</title><rect x="752.3" y="293" width="2.3" height="15.0" fill="rgb(246,167,10)" rx="2" ry="2" />
<text  x="755.26" y="303.5" ></text>
</g>
<g >
<title>tcp_send_mss (4 samples, 0.81%)</title><rect x="1130.5" y="693" width="9.5" height="15.0" fill="rgb(216,108,3)" rx="2" ry="2" />
<text  x="1133.52" y="703.5" ></text>
</g>
<g >
<title>__recv (63 samples, 12.70%)</title><rect x="88.5" y="837" width="149.9" height="15.0" fill="rgb(207,214,29)" rx="2" ry="2" />
<text  x="91.51" y="847.5" >__recv</text>
</g>
<g >
<title>release_sock (3 samples, 0.60%)</title><rect x="281.2" y="709" width="7.1" height="15.0" fill="rgb(213,11,0)" rx="2" ry="2" />
<text  x="284.21" y="719.5" ></text>
</g>
<g >
<title>mio::poll::Poll::poll (19 samples, 3.83%)</title><rect x="19.5" y="885" width="45.2" height="15.0" fill="rgb(217,10,16)" rx="2" ry="2" />
<text  x="22.52" y="895.5" >mio:..</text>
</g>
<g >
<title>is_cpu_allowed (1 samples, 0.20%)</title><rect x="802.2" y="133" width="2.4" height="15.0" fill="rgb(219,35,52)" rx="2" ry="2" />
<text  x="805.22" y="143.5" ></text>
</g>
<g >
<title>&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (384 samples, 77.42%)</title><rect x="238.4" y="869" width="913.5" height="15.0" fill="rgb(225,12,45)" rx="2" ry="2" />
<text  x="241.39" y="879.5" >&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write</text>
</g>
<g >
<title>enqueue_task_fair (19 samples, 3.83%)</title><rect x="852.2" y="85" width="45.2" height="15.0" fill="rgb(251,215,5)" rx="2" ry="2" />
<text  x="855.18" y="95.5" >enqu..</text>
</g>
<g >
<title>epoll_wait (19 samples, 3.83%)</title><rect x="19.5" y="869" width="45.2" height="15.0" fill="rgb(252,206,23)" rx="2" ry="2" />
<text  x="22.52" y="879.5" >epol..</text>
</g>
<g >
<title>ktime_get (1 samples, 0.20%)</title><rect x="226.5" y="661" width="2.4" height="15.0" fill="rgb(228,105,45)" rx="2" ry="2" />
<text  x="229.49" y="671.5" ></text>
</g>
<g >
<title>llist_add_batch (1 samples, 0.20%)</title><rect x="961.6" y="101" width="2.4" height="15.0" fill="rgb(237,2,22)" rx="2" ry="2" />
<text  x="964.61" y="111.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.20%)</title><rect x="207.5" y="629" width="2.3" height="15.0" fill="rgb(211,99,35)" rx="2" ry="2" />
<text  x="210.46" y="639.5" ></text>
</g>
<g >
<title>tcp_check_space (3 samples, 0.60%)</title><rect x="616.7" y="325" width="7.1" height="15.0" fill="rgb(242,37,9)" rx="2" ry="2" />
<text  x="619.65" y="335.5" ></text>
</g>
<g >
<title>ttwu_do_activate (46 samples, 9.27%)</title><rect x="849.8" y="117" width="109.4" height="15.0" fill="rgb(214,121,12)" rx="2" ry="2" />
<text  x="852.80" y="127.5" >ttwu_do_activ..</text>
</g>
<g >
<title>validate_xmit_skb (4 samples, 0.81%)</title><rect x="1082.9" y="501" width="9.6" height="15.0" fill="rgb(235,153,46)" rx="2" ry="2" />
<text  x="1085.94" y="511.5" ></text>
</g>
<g >
<title>aa_sk_perm (1 samples, 0.20%)</title><rect x="228.9" y="709" width="2.3" height="15.0" fill="rgb(250,12,43)" rx="2" ry="2" />
<text  x="231.87" y="719.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (491 samples, 98.99%)</title><rect x="12.4" y="965" width="1168.1" height="15.0" fill="rgb(253,208,25)" rx="2" ry="2" />
<text  x="15.38" y="975.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>syscall_enter_from_user_mode (1 samples, 0.20%)</title><rect x="236.0" y="789" width="2.4" height="15.0" fill="rgb(212,223,15)" rx="2" ry="2" />
<text  x="239.01" y="799.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hfd395d74ea96686a (491 samples, 98.99%)</title><rect x="12.4" y="981" width="1168.1" height="15.0" fill="rgb(243,148,49)" rx="2" ry="2" />
<text  x="15.38" y="991.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hfd395d74ea96686a</text>
</g>
<g >
<title>ip6_protocol_deliver_rcu (205 samples, 41.33%)</title><rect x="547.7" y="373" width="487.7" height="15.0" fill="rgb(221,5,44)" rx="2" ry="2" />
<text  x="550.66" y="383.5" >ip6_protocol_deliver_rcu</text>
</g>
<g >
<title>stokio::runtime::task::harness::Harness&lt;T&gt;::poll (466 samples, 93.95%)</title><rect x="64.7" y="901" width="1108.6" height="15.0" fill="rgb(216,12,31)" rx="2" ry="2" />
<text  x="67.72" y="911.5" >stokio::runtime::task::harness::Harness&lt;T&gt;::poll</text>
</g>
<g >
<title>fpregs_assert_state_consistent (1 samples, 0.20%)</title><rect x="62.3" y="805" width="2.4" height="15.0" fill="rgb(244,70,24)" rx="2" ry="2" />
<text  x="65.34" y="815.5" ></text>
</g>
<g >
<title>stokio::runtime::Runtime::run (491 samples, 98.99%)</title><rect x="12.4" y="933" width="1168.1" height="15.0" fill="rgb(244,81,43)" rx="2" ry="2" />
<text  x="15.38" y="943.5" >stokio::runtime::Runtime::run</text>
</g>
<g >
<title>__ksize (12 samples, 2.42%)</title><rect x="376.4" y="645" width="28.5" height="15.0" fill="rgb(252,113,40)" rx="2" ry="2" />
<text  x="379.37" y="655.5" >__..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.81%)</title><rect x="1180.5" y="1029" width="9.5" height="15.0" fill="rgb(215,87,27)" rx="2" ry="2" />
<text  x="1183.48" y="1039.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (1 samples, 0.20%)</title><rect x="10.0" y="997" width="2.4" height="15.0" fill="rgb(223,8,48)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (2 samples, 0.40%)</title><rect x="224.1" y="693" width="4.8" height="15.0" fill="rgb(247,60,35)" rx="2" ry="2" />
<text  x="227.11" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (376 samples, 75.81%)</title><rect x="252.7" y="821" width="894.5" height="15.0" fill="rgb(252,59,47)" rx="2" ry="2" />
<text  x="255.66" y="831.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>update_rq_clock (5 samples, 1.01%)</title><rect x="964.0" y="117" width="11.9" height="15.0" fill="rgb(214,5,12)" rx="2" ry="2" />
<text  x="966.99" y="127.5" ></text>
</g>
<g >
<title>mod_timer (1 samples, 0.20%)</title><rect x="1123.4" y="597" width="2.4" height="15.0" fill="rgb(250,143,27)" rx="2" ry="2" />
<text  x="1126.39" y="607.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.20%)</title><rect x="233.6" y="741" width="2.4" height="15.0" fill="rgb(241,74,42)" rx="2" ry="2" />
<text  x="236.63" y="751.5" ></text>
</g>
<g >
<title>netif_skb_features (1 samples, 0.20%)</title><rect x="1080.6" y="501" width="2.3" height="15.0" fill="rgb(249,145,51)" rx="2" ry="2" />
<text  x="1083.56" y="511.5" ></text>
</g>
<g >
<title>validate_xmit_vlan (2 samples, 0.40%)</title><rect x="1085.3" y="485" width="4.8" height="15.0" fill="rgb(221,226,13)" rx="2" ry="2" />
<text  x="1088.32" y="495.5" ></text>
</g>
<g >
<title>dst_release (5 samples, 1.01%)</title><rect x="186.0" y="661" width="11.9" height="15.0" fill="rgb(236,61,2)" rx="2" ry="2" />
<text  x="189.05" y="671.5" ></text>
</g>
<g >
<title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (63 samples, 12.70%)</title><rect x="88.5" y="853" width="149.9" height="15.0" fill="rgb(238,30,26)" rx="2" ry="2" />
<text  x="91.51" y="863.5" >&lt;&amp;std::net::tcp::Tc..</text>
</g>
<g >
<title>ttwu_queue_wakelist (2 samples, 0.40%)</title><rect x="959.2" y="117" width="4.8" height="15.0" fill="rgb(246,220,32)" rx="2" ry="2" />
<text  x="962.23" y="127.5" ></text>
</g>
<g >
<title>skb_page_frag_refill (1 samples, 0.20%)</title><rect x="319.3" y="677" width="2.4" height="15.0" fill="rgb(220,33,47)" rx="2" ry="2" />
<text  x="322.27" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (18 samples, 3.63%)</title><rect x="21.9" y="853" width="42.8" height="15.0" fill="rgb(234,56,37)" rx="2" ry="2" />
<text  x="24.90" y="863.5" >entr..</text>
</g>
<g >
<title>sk_reset_timer (1 samples, 0.20%)</title><rect x="1123.4" y="613" width="2.4" height="15.0" fill="rgb(226,66,22)" rx="2" ry="2" />
<text  x="1126.39" y="623.5" ></text>
</g>
<g >
<title>stokio::runtime::io::Driver::park (21 samples, 4.23%)</title><rect x="14.8" y="901" width="49.9" height="15.0" fill="rgb(248,223,22)" rx="2" ry="2" />
<text  x="17.76" y="911.5" >stoki..</text>
</g>
<g >
<title>sock_def_readable (112 samples, 22.58%)</title><rect x="754.6" y="293" width="266.5" height="15.0" fill="rgb(213,47,37)" rx="2" ry="2" />
<text  x="757.64" y="303.5" >sock_def_readable</text>
</g>
<g >
<title>update_load_avg (3 samples, 0.60%)</title><rect x="890.2" y="53" width="7.2" height="15.0" fill="rgb(240,226,28)" rx="2" ry="2" />
<text  x="893.24" y="63.5" ></text>
</g>
<g >
<title>inet6_ehashfn (1 samples, 0.20%)</title><rect x="607.1" y="325" width="2.4" height="15.0" fill="rgb(239,100,15)" rx="2" ry="2" />
<text  x="610.14" y="335.5" ></text>
</g>
<g >
<title>rb_first (1 samples, 0.20%)</title><rect x="680.9" y="293" width="2.4" height="15.0" fill="rgb(247,65,51)" rx="2" ry="2" />
<text  x="683.89" y="303.5" ></text>
</g>
<g >
<title>stokio::runtime::scheduler::Scheduler::run (491 samples, 98.99%)</title><rect x="12.4" y="917" width="1168.1" height="15.0" fill="rgb(228,195,8)" rx="2" ry="2" />
<text  x="15.38" y="927.5" >stokio::runtime::scheduler::Scheduler::run</text>
</g>
<g >
<title>available_idle_cpu (1 samples, 0.20%)</title><rect x="847.4" y="85" width="2.4" height="15.0" fill="rgb(227,44,18)" rx="2" ry="2" />
<text  x="850.42" y="95.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (81 samples, 16.33%)</title><rect x="795.1" y="197" width="192.7" height="15.0" fill="rgb(214,108,48)" rx="2" ry="2" />
<text  x="798.08" y="207.5" >__wake_up_common_lock</text>
</g>
<g >
<title>__mod_timer (1 samples, 0.20%)</title><rect x="1123.4" y="581" width="2.4" height="15.0" fill="rgb(213,12,4)" rx="2" ry="2" />
<text  x="1126.39" y="591.5" ></text>
</g>
<g >
<title>bprm_execve (4 samples, 0.81%)</title><rect x="1180.5" y="981" width="9.5" height="15.0" fill="rgb(217,157,13)" rx="2" ry="2" />
<text  x="1183.48" y="991.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (1 samples, 0.20%)</title><rect x="221.7" y="693" width="2.4" height="15.0" fill="rgb(224,73,31)" rx="2" ry="2" />
<text  x="224.73" y="703.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.20%)</title><rect x="942.6" y="37" width="2.4" height="15.0" fill="rgb(228,54,18)" rx="2" ry="2" />
<text  x="945.58" y="47.5" ></text>
</g>
<g >
<title>__send (383 samples, 77.22%)</title><rect x="240.8" y="837" width="911.1" height="15.0" fill="rgb(226,107,44)" rx="2" ry="2" />
<text  x="243.77" y="847.5" >__send</text>
</g>
<g >
<title>try_to_wake_up (70 samples, 14.11%)</title><rect x="809.4" y="133" width="166.5" height="15.0" fill="rgb(237,13,15)" rx="2" ry="2" />
<text  x="812.35" y="143.5" >try_to_wake_up</text>
</g>
<g >
<title>tcp_sendmsg (363 samples, 73.19%)</title><rect x="276.5" y="725" width="863.5" height="15.0" fill="rgb(236,118,39)" rx="2" ry="2" />
<text  x="279.45" y="735.5" >tcp_sendmsg</text>
</g>
<g >
<title>psi_task_change (20 samples, 4.03%)</title><rect x="897.4" y="85" width="47.6" height="15.0" fill="rgb(229,21,34)" rx="2" ry="2" />
<text  x="900.38" y="95.5" >psi_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (57 samples, 11.49%)</title><rect x="102.8" y="821" width="135.6" height="15.0" fill="rgb(223,135,23)" rx="2" ry="2" />
<text  x="105.78" y="831.5" >entry_SYSCALL_64_..</text>
</g>
<g >
<title>std::rt::lang_start_internal (491 samples, 98.99%)</title><rect x="12.4" y="997" width="1168.1" height="15.0" fill="rgb(240,103,20)" rx="2" ry="2" />
<text  x="15.38" y="1007.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>free_p4d_range (1 samples, 0.20%)</title><rect x="10.0" y="853" width="2.4" height="15.0" fill="rgb(244,188,35)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (1 samples, 0.20%)</title><rect x="1090.1" y="485" width="2.4" height="15.0" fill="rgb(234,113,44)" rx="2" ry="2" />
<text  x="1093.08" y="495.5" ></text>
</g>
<g >
<title>skb_clone (6 samples, 1.21%)</title><rect x="1097.2" y="629" width="14.3" height="15.0" fill="rgb(232,54,31)" rx="2" ry="2" />
<text  x="1100.22" y="639.5" ></text>
</g>
<g >
<title>csum_ipv6_magic (1 samples, 0.20%)</title><rect x="469.2" y="629" width="2.3" height="15.0" fill="rgb(248,106,12)" rx="2" ry="2" />
<text  x="472.15" y="639.5" ></text>
</g>
<g >
<title>__kfree_skb (11 samples, 2.22%)</title><rect x="171.8" y="693" width="26.1" height="15.0" fill="rgb(244,214,45)" rx="2" ry="2" />
<text  x="174.77" y="703.5" >_..</text>
</g>
<g >
<title>tcp_recvmsg (46 samples, 9.27%)</title><rect x="119.4" y="725" width="109.5" height="15.0" fill="rgb(212,4,18)" rx="2" ry="2" />
<text  x="122.44" y="735.5" >tcp_recvmsg</text>
</g>
<g >
<title>select_task_rq_fair (2 samples, 0.40%)</title><rect x="804.6" y="133" width="4.8" height="15.0" fill="rgb(217,16,38)" rx="2" ry="2" />
<text  x="807.60" y="143.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.20%)</title><rect x="345.4" y="629" width="2.4" height="15.0" fill="rgb(216,162,21)" rx="2" ry="2" />
<text  x="348.44" y="639.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 0.81%)</title><rect x="1180.5" y="821" width="9.5" height="15.0" fill="rgb(236,48,2)" rx="2" ry="2" />
<text  x="1183.48" y="831.5" ></text>
</g>
<g >
<title>netif_rx_internal (1 samples, 0.20%)</title><rect x="1063.9" y="453" width="2.4" height="15.0" fill="rgb(242,149,11)" rx="2" ry="2" />
<text  x="1066.91" y="463.5" ></text>
</g>
<g >
<title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (383 samples, 77.22%)</title><rect x="240.8" y="853" width="911.1" height="15.0" fill="rgb(210,199,33)" rx="2" ry="2" />
<text  x="243.77" y="863.5" >&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write</text>
</g>
<g >
<title>ip6_finish_output (253 samples, 51.01%)</title><rect x="490.6" y="581" width="601.9" height="15.0" fill="rgb(246,222,22)" rx="2" ry="2" />
<text  x="493.56" y="591.5" >ip6_finish_output</text>
</g>
<g >
<title>kfree_skbmem (5 samples, 1.01%)</title><rect x="697.5" y="261" width="11.9" height="15.0" fill="rgb(248,157,36)" rx="2" ry="2" />
<text  x="700.54" y="271.5" ></text>
</g>
<g >
<title>__ip6_finish_output (249 samples, 50.20%)</title><rect x="500.1" y="565" width="592.4" height="15.0" fill="rgb(246,183,48)" rx="2" ry="2" />
<text  x="503.08" y="575.5" >__ip6_finish_output</text>
</g>
<g >
<title>bprm_execve.part.0 (1 samples, 0.20%)</title><rect x="10.0" y="965" width="2.4" height="15.0" fill="rgb(209,30,3)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>kmalloc_slab (1 samples, 0.20%)</title><rect x="347.8" y="645" width="2.4" height="15.0" fill="rgb(226,159,16)" rx="2" ry="2" />
<text  x="350.82" y="655.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (221 samples, 44.56%)</title><rect x="512.0" y="501" width="525.7" height="15.0" fill="rgb(230,35,52)" rx="2" ry="2" />
<text  x="514.98" y="511.5" >__softirqentry_text_start</text>
</g>
<g >
<title>process_backlog (214 samples, 43.15%)</title><rect x="528.6" y="453" width="509.1" height="15.0" fill="rgb(234,70,40)" rx="2" ry="2" />
<text  x="531.63" y="463.5" >process_backlog</text>
</g>
<g >
<title>rcu_read_unlock_strict (1 samples, 0.20%)</title><rect x="473.9" y="581" width="2.4" height="15.0" fill="rgb(222,43,33)" rx="2" ry="2" />
<text  x="476.91" y="591.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (4 samples, 0.81%)</title><rect x="1180.5" y="997" width="9.5" height="15.0" fill="rgb(254,32,24)" rx="2" ry="2" />
<text  x="1183.48" y="1007.5" ></text>
</g>
<g >
<title>ktime_get_with_offset (2 samples, 0.40%)</title><rect x="1059.2" y="421" width="4.7" height="15.0" fill="rgb(211,13,18)" rx="2" ry="2" />
<text  x="1062.15" y="431.5" ></text>
</g>
<g >
<title>bprm_execve (1 samples, 0.20%)</title><rect x="10.0" y="981" width="2.4" height="15.0" fill="rgb(217,71,53)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe.part.0 (1 samples, 0.20%)</title><rect x="1128.1" y="645" width="2.4" height="15.0" fill="rgb(224,211,26)" rx="2" ry="2" />
<text  x="1131.15" y="655.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (3 samples, 0.60%)</title><rect x="652.3" y="293" width="7.2" height="15.0" fill="rgb(243,210,0)" rx="2" ry="2" />
<text  x="655.34" y="303.5" ></text>
</g>
<g >
<title>begin_new_exec (4 samples, 0.81%)</title><rect x="1180.5" y="901" width="9.5" height="15.0" fill="rgb(214,51,29)" rx="2" ry="2" />
<text  x="1183.48" y="911.5" ></text>
</g>
<g >
<title>ip6_finish_output (1 samples, 0.20%)</title><rect x="485.8" y="597" width="2.4" height="15.0" fill="rgb(219,210,50)" rx="2" ry="2" />
<text  x="488.81" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.20%)</title><rect x="657.1" y="213" width="2.4" height="15.0" fill="rgb(252,162,27)" rx="2" ry="2" />
<text  x="660.10" y="223.5" ></text>
</g>
<g >
<title>_raw_read_unlock_irqrestore (9 samples, 1.81%)</title><rect x="759.4" y="229" width="21.4" height="15.0" fill="rgb(228,70,46)" rx="2" ry="2" />
<text  x="762.40" y="239.5" >_..</text>
</g>
<g >
<title>mod_timer (3 samples, 0.60%)</title><rect x="652.3" y="261" width="7.2" height="15.0" fill="rgb(237,156,3)" rx="2" ry="2" />
<text  x="655.34" y="271.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 0.81%)</title><rect x="1180.5" y="869" width="9.5" height="15.0" fill="rgb(238,203,44)" rx="2" ry="2" />
<text  x="1183.48" y="879.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (355 samples, 71.57%)</title><rect x="295.5" y="709" width="844.5" height="15.0" fill="rgb(225,111,37)" rx="2" ry="2" />
<text  x="298.48" y="719.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>skb_release_data (1 samples, 0.20%)</title><rect x="183.7" y="677" width="2.3" height="15.0" fill="rgb(209,99,10)" rx="2" ry="2" />
<text  x="186.67" y="687.5" ></text>
</g>
<g >
<title>lock_timer_base (1 samples, 0.20%)</title><rect x="657.1" y="229" width="2.4" height="15.0" fill="rgb(251,156,39)" rx="2" ry="2" />
<text  x="660.10" y="239.5" ></text>
</g>
<g >
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.20%)</title><rect x="614.3" y="309" width="2.4" height="15.0" fill="rgb(221,65,18)" rx="2" ry="2" />
<text  x="617.27" y="319.5" ></text>
</g>
<g >
<title>skb_do_copy_data_nocache (6 samples, 1.21%)</title><rect x="404.9" y="693" width="14.3" height="15.0" fill="rgb(225,224,39)" rx="2" ry="2" />
<text  x="407.92" y="703.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (4 samples, 0.81%)</title><rect x="650.0" y="309" width="9.5" height="15.0" fill="rgb(254,39,3)" rx="2" ry="2" />
<text  x="652.96" y="319.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (5 samples, 1.01%)</title><rect x="335.9" y="645" width="11.9" height="15.0" fill="rgb(239,68,2)" rx="2" ry="2" />
<text  x="338.93" y="655.5" ></text>
</g>
<g >
<title>__skb_clone (5 samples, 1.01%)</title><rect x="1099.6" y="613" width="11.9" height="15.0" fill="rgb(246,143,43)" rx="2" ry="2" />
<text  x="1102.60" y="623.5" ></text>
</g>
<g >
<title>ep_poll (17 samples, 3.43%)</title><rect x="21.9" y="789" width="40.4" height="15.0" fill="rgb(217,217,54)" rx="2" ry="2" />
<text  x="24.90" y="799.5" >ep_..</text>
</g>
<g >
<title>__sys_sendto (374 samples, 75.40%)</title><rect x="255.0" y="773" width="889.8" height="15.0" fill="rgb(218,5,50)" rx="2" ry="2" />
<text  x="258.04" y="783.5" >__sys_sendto</text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.20%)</title><rect x="416.8" y="677" width="2.4" height="15.0" fill="rgb(215,42,47)" rx="2" ry="2" />
<text  x="419.81" y="687.5" ></text>
</g>
<g >
<title>wake_affine (1 samples, 0.20%)</title><rect x="847.4" y="101" width="2.4" height="15.0" fill="rgb(254,208,21)" rx="2" ry="2" />
<text  x="850.42" y="111.5" ></text>
</g>
<g >
<title>check_preempt_curr (5 samples, 1.01%)</title><rect x="947.3" y="85" width="11.9" height="15.0" fill="rgb(250,213,40)" rx="2" ry="2" />
<text  x="950.34" y="95.5" ></text>
</g>
<g >
<title>tcp_wfree (1 samples, 0.20%)</title><rect x="1078.2" y="469" width="2.4" height="15.0" fill="rgb(244,36,30)" rx="2" ry="2" />
<text  x="1081.19" y="479.5" ></text>
</g>
<g >
<title>__fdget (1 samples, 0.20%)</title><rect x="107.5" y="757" width="2.4" height="15.0" fill="rgb(241,70,16)" rx="2" ry="2" />
<text  x="110.54" y="767.5" ></text>
</g>
<g >
<title>___pmd_free_tlb (1 samples, 0.20%)</title><rect x="10.0" y="821" width="2.4" height="15.0" fill="rgb(218,27,2)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>psi_group_change (13 samples, 2.62%)</title><rect x="911.7" y="69" width="30.9" height="15.0" fill="rgb(246,122,2)" rx="2" ry="2" />
<text  x="914.65" y="79.5" >ps..</text>
</g>
<g >
<title>tcp_rate_skb_delivered (1 samples, 0.20%)</title><rect x="747.5" y="277" width="2.4" height="15.0" fill="rgb(230,195,52)" rx="2" ry="2" />
<text  x="750.50" y="287.5" ></text>
</g>
<g >
<title>__tcp_select_window (1 samples, 0.20%)</title><rect x="221.7" y="677" width="2.4" height="15.0" fill="rgb(231,27,19)" rx="2" ry="2" />
<text  x="224.73" y="687.5" ></text>
</g>
<g >
<title>kmalloc_reserve (15 samples, 3.02%)</title><rect x="333.5" y="661" width="35.7" height="15.0" fill="rgb(239,55,54)" rx="2" ry="2" />
<text  x="336.55" y="671.5" >kma..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.20%)</title><rect x="414.4" y="677" width="2.4" height="15.0" fill="rgb(253,116,43)" rx="2" ry="2" />
<text  x="417.44" y="687.5" ></text>
</g>
<g >
<title>stokio::net::tcp::stream::TcpStream::write (1 samples, 0.20%)</title><rect x="1168.6" y="869" width="2.4" height="15.0" fill="rgb(219,67,24)" rx="2" ry="2" />
<text  x="1171.59" y="879.5" ></text>
</g>
<g >
<title>__entry_text_start (4 samples, 0.81%)</title><rect x="243.1" y="821" width="9.6" height="15.0" fill="rgb(226,46,19)" rx="2" ry="2" />
<text  x="246.15" y="831.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (3 samples, 0.60%)</title><rect x="369.2" y="661" width="7.2" height="15.0" fill="rgb(251,175,27)" rx="2" ry="2" />
<text  x="372.23" y="671.5" ></text>
</g>
<g >
<title>autoremove_wake_function (1 samples, 0.20%)</title><rect x="985.4" y="181" width="2.4" height="15.0" fill="rgb(242,19,9)" rx="2" ry="2" />
<text  x="988.40" y="191.5" ></text>
</g>
<g >
<title>stokio::runtime::io::interest::Interest::is_readable (1 samples, 0.20%)</title><rect x="1156.7" y="853" width="2.4" height="15.0" fill="rgb(251,210,36)" rx="2" ry="2" />
<text  x="1159.69" y="863.5" ></text>
</g>
<g >
<title>perf-exec (4 samples, 0.81%)</title><rect x="1180.5" y="1077" width="9.5" height="15.0" fill="rgb(239,2,36)" rx="2" ry="2" />
<text  x="1183.48" y="1087.5" ></text>
</g>
<g >
<title>__slab_free (6 samples, 1.21%)</title><rect x="733.2" y="213" width="14.3" height="15.0" fill="rgb(250,218,44)" rx="2" ry="2" />
<text  x="736.23" y="223.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (1 samples, 0.20%)</title><rect x="1123.4" y="629" width="2.4" height="15.0" fill="rgb(208,54,41)" rx="2" ry="2" />
<text  x="1126.39" y="639.5" ></text>
</g>
<g >
<title>__put_user_nocheck_4 (2 samples, 0.40%)</title><rect x="24.3" y="773" width="4.7" height="15.0" fill="rgb(244,34,17)" rx="2" ry="2" />
<text  x="27.27" y="783.5" ></text>
</g>
<g >
<title>sk_reset_timer (1 samples, 0.20%)</title><rect x="1128.1" y="629" width="2.4" height="15.0" fill="rgb(218,210,39)" rx="2" ry="2" />
<text  x="1131.15" y="639.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (466 samples, 93.95%)</title><rect x="64.7" y="885" width="1108.6" height="15.0" fill="rgb(217,27,32)" rx="2" ry="2" />
<text  x="67.72" y="895.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text>
</g>
<g >
<title>__skb_datagram_iter (10 samples, 2.02%)</title><rect x="197.9" y="677" width="23.8" height="15.0" fill="rgb(245,135,49)" rx="2" ry="2" />
<text  x="200.94" y="687.5" >_..</text>
</g>
</g>
</svg>
