<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1014.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="997" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="997" > </text>
<g id="frames">
<g >
<title>inet6_recvmsg (49 samples, 9.88%)</title><rect x="1042.5" y="581" width="116.6" height="15.0" fill="rgb(240,164,1)" rx="2" ry="2" />
<text  x="1045.50" y="591.5" >inet6_recvmsg</text>
</g>
<g >
<title>skb_release_data (4 samples, 0.81%)</title><rect x="742.7" y="165" width="9.6" height="15.0" fill="rgb(242,133,26)" rx="2" ry="2" />
<text  x="745.74" y="175.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (1 samples, 0.20%)</title><rect x="1097.2" y="357" width="2.4" height="15.0" fill="rgb(229,140,9)" rx="2" ry="2" />
<text  x="1100.22" y="367.5" ></text>
</g>
<g >
<title>tcp_check_space (7 samples, 1.41%)</title><rect x="783.2" y="213" width="16.6" height="15.0" fill="rgb(252,154,0)" rx="2" ry="2" />
<text  x="786.19" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (25 samples, 5.04%)</title><rect x="24.3" y="709" width="59.5" height="15.0" fill="rgb(208,83,20)" rx="2" ry="2" />
<text  x="27.27" y="719.5" >do_sys..</text>
</g>
<g >
<title>main (491 samples, 98.99%)</title><rect x="21.9" y="901" width="1168.1" height="15.0" fill="rgb(239,112,26)" rx="2" ry="2" />
<text  x="24.90" y="911.5" >main</text>
</g>
<g >
<title>inet6_csk_route_socket (9 samples, 1.81%)</title><rect x="238.4" y="469" width="21.4" height="15.0" fill="rgb(216,132,10)" rx="2" ry="2" />
<text  x="241.39" y="479.5" >i..</text>
</g>
<g >
<title>release_sock (2 samples, 0.40%)</title><rect x="133.7" y="549" width="4.8" height="15.0" fill="rgb(234,220,35)" rx="2" ry="2" />
<text  x="136.71" y="559.5" ></text>
</g>
<g >
<title>tcp_mtu_probe (1 samples, 0.20%)</title><rect x="895.0" y="501" width="2.4" height="15.0" fill="rgb(250,86,18)" rx="2" ry="2" />
<text  x="898.00" y="511.5" ></text>
</g>
<g >
<title>skb_release_head_state (1 samples, 0.20%)</title><rect x="1097.2" y="213" width="2.4" height="15.0" fill="rgb(235,226,25)" rx="2" ry="2" />
<text  x="1100.22" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.20%)</title><rect x="1104.4" y="533" width="2.3" height="15.0" fill="rgb(230,192,46)" rx="2" ry="2" />
<text  x="1107.35" y="543.5" ></text>
</g>
<g >
<title>dst_release (3 samples, 0.60%)</title><rect x="1090.1" y="517" width="7.1" height="15.0" fill="rgb(211,144,35)" rx="2" ry="2" />
<text  x="1093.08" y="527.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (1 samples, 0.20%)</title><rect x="1016.3" y="613" width="2.4" height="15.0" fill="rgb(247,16,47)" rx="2" ry="2" />
<text  x="1019.33" y="623.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.20%)</title><rect x="807.0" y="181" width="2.4" height="15.0" fill="rgb(209,177,14)" rx="2" ry="2" />
<text  x="809.98" y="191.5" ></text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::Context::run_task (463 samples, 93.35%)</title><rect x="88.5" y="789" width="1101.5" height="15.0" fill="rgb(232,24,52)" rx="2" ry="2" />
<text  x="91.51" y="799.5" >tokio::runtime::basic_scheduler::Context::run_task</text>
</g>
<g >
<title>__kfree_skb (30 samples, 6.05%)</title><rect x="683.3" y="181" width="71.3" height="15.0" fill="rgb(222,55,43)" rx="2" ry="2" />
<text  x="686.27" y="191.5" >__kfree_..</text>
</g>
<g >
<title>tcp_rack_advance (1 samples, 0.20%)</title><rect x="778.4" y="181" width="2.4" height="15.0" fill="rgb(212,23,6)" rx="2" ry="2" />
<text  x="781.43" y="191.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.81%)</title><rect x="10.0" y="933" width="9.5" height="15.0" fill="rgb(225,117,27)" rx="2" ry="2" />
<text  x="13.00" y="943.5" ></text>
</g>
<g >
<title>_start (491 samples, 98.99%)</title><rect x="21.9" y="933" width="1168.1" height="15.0" fill="rgb(224,93,15)" rx="2" ry="2" />
<text  x="24.90" y="943.5" >_start</text>
</g>
<g >
<title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (67 samples, 13.51%)</title><rect x="1025.8" y="725" width="159.4" height="15.0" fill="rgb(215,195,0)" rx="2" ry="2" />
<text  x="1028.85" y="735.5" >tokio::io::poll_even..</text>
</g>
<g >
<title>asm_call_sysvec_on_stack (227 samples, 45.77%)</title><rect x="300.2" y="389" width="540.1" height="15.0" fill="rgb(209,19,5)" rx="2" ry="2" />
<text  x="303.24" y="399.5" >asm_call_sysvec_on_stack</text>
</g>
<g >
<title>__kfree_skb (1 samples, 0.20%)</title><rect x="1097.2" y="229" width="2.4" height="15.0" fill="rgb(223,161,47)" rx="2" ry="2" />
<text  x="1100.22" y="239.5" ></text>
</g>
<g >
<title>ip6_xmit (246 samples, 49.60%)</title><rect x="259.8" y="469" width="585.2" height="15.0" fill="rgb(238,112,46)" rx="2" ry="2" />
<text  x="262.80" y="479.5" >ip6_xmit</text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.20%)</title><rect x="1097.2" y="549" width="2.4" height="15.0" fill="rgb(205,30,5)" rx="2" ry="2" />
<text  x="1100.22" y="559.5" ></text>
</g>
<g >
<title>tcp_v6_do_rcv (186 samples, 37.50%)</title><rect x="385.9" y="245" width="442.5" height="15.0" fill="rgb(224,117,49)" rx="2" ry="2" />
<text  x="388.89" y="255.5" >tcp_v6_do_rcv</text>
</g>
<g >
<title>__wake_up_common (55 samples, 11.09%)</title><rect x="447.7" y="133" width="130.9" height="15.0" fill="rgb(233,180,6)" rx="2" ry="2" />
<text  x="450.74" y="143.5" >__wake_up_common</text>
</g>
<g >
<title>net_rx_action (1 samples, 0.20%)</title><rect x="1097.2" y="405" width="2.4" height="15.0" fill="rgb(213,122,37)" rx="2" ry="2" />
<text  x="1100.22" y="415.5" ></text>
</g>
<g >
<title>try_to_wake_up (42 samples, 8.47%)</title><rect x="478.7" y="101" width="99.9" height="15.0" fill="rgb(253,229,42)" rx="2" ry="2" />
<text  x="481.67" y="111.5" >try_to_wake_up</text>
</g>
<g >
<title>process_backlog (223 samples, 44.96%)</title><rect x="309.8" y="325" width="530.5" height="15.0" fill="rgb(236,183,30)" rx="2" ry="2" />
<text  x="312.76" y="335.5" >process_backlog</text>
</g>
<g >
<title>search_binary_handler (4 samples, 0.81%)</title><rect x="10.0" y="821" width="9.5" height="15.0" fill="rgb(222,160,18)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.20%)</title><rect x="1097.2" y="485" width="2.4" height="15.0" fill="rgb(231,95,37)" rx="2" ry="2" />
<text  x="1100.22" y="495.5" ></text>
</g>
<g >
<title>__mod_timer (8 samples, 1.61%)</title><rect x="876.0" y="469" width="19.0" height="15.0" fill="rgb(222,140,2)" rx="2" ry="2" />
<text  x="878.97" y="479.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (5 samples, 1.01%)</title><rect x="1147.2" y="549" width="11.9" height="15.0" fill="rgb(211,140,34)" rx="2" ry="2" />
<text  x="1150.18" y="559.5" ></text>
</g>
<g >
<title>ip6_xmit (1 samples, 0.20%)</title><rect x="1097.2" y="517" width="2.4" height="15.0" fill="rgb(250,24,11)" rx="2" ry="2" />
<text  x="1100.22" y="527.5" ></text>
</g>
<g >
<title>__skb_clone (13 samples, 2.62%)</title><rect x="202.7" y="485" width="30.9" height="15.0" fill="rgb(251,96,48)" rx="2" ry="2" />
<text  x="205.70" y="495.5" >__..</text>
</g>
<g >
<title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (387 samples, 78.02%)</title><rect x="105.2" y="693" width="920.6" height="15.0" fill="rgb(229,2,21)" rx="2" ry="2" />
<text  x="108.16" y="703.5" >&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write</text>
</g>
<g >
<title>lock_sock_nested (3 samples, 0.60%)</title><rect x="126.6" y="549" width="7.1" height="15.0" fill="rgb(224,85,39)" rx="2" ry="2" />
<text  x="129.57" y="559.5" ></text>
</g>
<g >
<title>csum_ipv6_magic (1 samples, 0.20%)</title><rect x="856.9" y="469" width="2.4" height="15.0" fill="rgb(223,177,25)" rx="2" ry="2" />
<text  x="859.94" y="479.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1 samples, 0.20%)</title><rect x="383.5" y="213" width="2.4" height="15.0" fill="rgb(206,103,25)" rx="2" ry="2" />
<text  x="386.51" y="223.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (279 samples, 56.25%)</title><rect x="195.6" y="501" width="663.7" height="15.0" fill="rgb(211,152,28)" rx="2" ry="2" />
<text  x="198.56" y="511.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>__x64_sys_execve (4 samples, 0.81%)</title><rect x="10.0" y="885" width="9.5" height="15.0" fill="rgb(222,172,48)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (456 samples, 91.94%)</title><rect x="100.4" y="741" width="1084.8" height="15.0" fill="rgb(241,120,37)" rx="2" ry="2" />
<text  x="103.40" y="751.5" >&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text>
</g>
<g >
<title>__fput (1 samples, 0.20%)</title><rect x="19.5" y="837" width="2.4" height="15.0" fill="rgb(248,226,12)" rx="2" ry="2" />
<text  x="22.52" y="847.5" ></text>
</g>
<g >
<title>lockref_put_return (1 samples, 0.20%)</title><rect x="19.5" y="805" width="2.4" height="15.0" fill="rgb(236,178,4)" rx="2" ry="2" />
<text  x="22.52" y="815.5" ></text>
</g>
<g >
<title>_raw_write_lock_irq (1 samples, 0.20%)</title><rect x="31.4" y="629" width="2.4" height="15.0" fill="rgb(247,162,47)" rx="2" ry="2" />
<text  x="34.41" y="639.5" ></text>
</g>
<g >
<title>__entry_text_start (1 samples, 0.20%)</title><rect x="1035.4" y="645" width="2.3" height="15.0" fill="rgb(208,139,25)" rx="2" ry="2" />
<text  x="1038.36" y="655.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.20%)</title><rect x="312.1" y="293" width="2.4" height="15.0" fill="rgb(246,165,31)" rx="2" ry="2" />
<text  x="315.14" y="303.5" ></text>
</g>
<g >
<title>sock_sendmsg (374 samples, 75.40%)</title><rect x="126.6" y="581" width="889.7" height="15.0" fill="rgb(216,148,44)" rx="2" ry="2" />
<text  x="129.57" y="591.5" >sock_sendmsg</text>
</g>
<g >
<title>ep_poll_callback (74 samples, 14.92%)</title><rect x="440.6" y="165" width="176.1" height="15.0" fill="rgb(237,12,3)" rx="2" ry="2" />
<text  x="443.60" y="175.5" >ep_poll_callback</text>
</g>
<g >
<title>ip6_finish_output2 (1 samples, 0.20%)</title><rect x="1097.2" y="501" width="2.4" height="15.0" fill="rgb(237,28,50)" rx="2" ry="2" />
<text  x="1100.22" y="511.5" ></text>
</g>
<g >
<title>_raw_read_lock_irqsave (8 samples, 1.61%)</title><rect x="578.6" y="149" width="19.0" height="15.0" fill="rgb(244,6,21)" rx="2" ry="2" />
<text  x="581.59" y="159.5" ></text>
</g>
<g >
<title>skb_network_protocol (1 samples, 0.20%)</title><rect x="288.3" y="389" width="2.4" height="15.0" fill="rgb(245,150,40)" rx="2" ry="2" />
<text  x="291.35" y="399.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.20%)</title><rect x="1097.2" y="453" width="2.4" height="15.0" fill="rgb(210,94,32)" rx="2" ry="2" />
<text  x="1100.22" y="463.5" ></text>
</g>
<g >
<title>__wake_up_common (76 samples, 15.32%)</title><rect x="435.8" y="181" width="180.9" height="15.0" fill="rgb(215,215,50)" rx="2" ry="2" />
<text  x="438.85" y="191.5" >__wake_up_common</text>
</g>
<g >
<title>ttwu_queue_wakelist (19 samples, 3.83%)</title><rect x="533.4" y="85" width="45.2" height="15.0" fill="rgb(228,227,25)" rx="2" ry="2" />
<text  x="536.39" y="95.5" >ttwu..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (53 samples, 10.69%)</title><rect x="1037.7" y="645" width="126.1" height="15.0" fill="rgb(221,62,52)" rx="2" ry="2" />
<text  x="1040.74" y="655.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>inet6_csk_xmit (1 samples, 0.20%)</title><rect x="1097.2" y="533" width="2.4" height="15.0" fill="rgb(222,207,34)" rx="2" ry="2" />
<text  x="1100.22" y="543.5" ></text>
</g>
<g >
<title>exec_binprm (4 samples, 0.81%)</title><rect x="10.0" y="837" width="9.5" height="15.0" fill="rgb(244,88,0)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (491 samples, 98.99%)</title><rect x="21.9" y="885" width="1168.1" height="15.0" fill="rgb(242,31,22)" rx="2" ry="2" />
<text  x="24.90" y="895.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>skb_release_head_state (3 samples, 0.60%)</title><rect x="1090.1" y="533" width="7.1" height="15.0" fill="rgb(248,64,48)" rx="2" ry="2" />
<text  x="1093.08" y="543.5" ></text>
</g>
<g >
<title>tcp_v6_rcv (215 samples, 43.35%)</title><rect x="319.3" y="261" width="511.5" height="15.0" fill="rgb(231,89,17)" rx="2" ry="2" />
<text  x="322.27" y="271.5" >tcp_v6_rcv</text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.20%)</title><rect x="19.5" y="885" width="2.4" height="15.0" fill="rgb(216,210,12)" rx="2" ry="2" />
<text  x="22.52" y="895.5" ></text>
</g>
<g >
<title>tcp_recvmsg (47 samples, 9.48%)</title><rect x="1047.3" y="565" width="111.8" height="15.0" fill="rgb(230,191,45)" rx="2" ry="2" />
<text  x="1050.26" y="575.5" >tcp_recvmsg</text>
</g>
<g >
<title>ep_send_events_proc (21 samples, 4.23%)</title><rect x="33.8" y="629" width="50.0" height="15.0" fill="rgb(212,47,14)" rx="2" ry="2" />
<text  x="36.79" y="639.5" >ep_se..</text>
</g>
<g >
<title>tcp_send_delayed_ack (1 samples, 0.20%)</title><rect x="826.0" y="213" width="2.4" height="15.0" fill="rgb(207,208,24)" rx="2" ry="2" />
<text  x="829.01" y="223.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (8 samples, 1.61%)</title><rect x="1128.1" y="517" width="19.1" height="15.0" fill="rgb(222,70,12)" rx="2" ry="2" />
<text  x="1131.15" y="527.5" ></text>
</g>
<g >
<title>harmonize_features (1 samples, 0.20%)</title><rect x="288.3" y="405" width="2.4" height="15.0" fill="rgb(241,217,44)" rx="2" ry="2" />
<text  x="291.35" y="415.5" ></text>
</g>
<g >
<title>do_softirq (229 samples, 46.17%)</title><rect x="295.5" y="421" width="544.8" height="15.0" fill="rgb(216,61,16)" rx="2" ry="2" />
<text  x="298.48" y="431.5" >do_softirq</text>
</g>
<g >
<title>tcp_ack (59 samples, 11.90%)</title><rect x="642.8" y="213" width="140.4" height="15.0" fill="rgb(216,208,0)" rx="2" ry="2" />
<text  x="645.82" y="223.5" >tcp_ack</text>
</g>
<g >
<title>sk_page_frag_refill (11 samples, 2.22%)</title><rect x="899.8" y="533" width="26.1" height="15.0" fill="rgb(213,185,38)" rx="2" ry="2" />
<text  x="902.76" y="543.5" >s..</text>
</g>
<g >
<title>perf_event_enable_on_exec (4 samples, 0.81%)</title><rect x="10.0" y="757" width="9.5" height="15.0" fill="rgb(215,120,30)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (87 samples, 17.54%)</title><rect x="435.8" y="197" width="207.0" height="15.0" fill="rgb(205,180,7)" rx="2" ry="2" />
<text  x="438.85" y="207.5" >__wake_up_common_lock</text>
</g>
<g >
<title>__libc_recv (57 samples, 11.49%)</title><rect x="1028.2" y="661" width="135.6" height="15.0" fill="rgb(240,200,50)" rx="2" ry="2" />
<text  x="1031.23" y="671.5" >__libc_recv</text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.20%)</title><rect x="19.5" y="901" width="2.4" height="15.0" fill="rgb(215,216,23)" rx="2" ry="2" />
<text  x="22.52" y="911.5" ></text>
</g>
<g >
<title>napi_poll (224 samples, 45.16%)</title><rect x="307.4" y="341" width="532.9" height="15.0" fill="rgb(248,46,37)" rx="2" ry="2" />
<text  x="310.38" y="351.5" >napi_poll</text>
</g>
<g >
<title>tcp_release_cb (2 samples, 0.40%)</title><rect x="133.7" y="533" width="4.8" height="15.0" fill="rgb(233,127,36)" rx="2" ry="2" />
<text  x="136.71" y="543.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (1 samples, 0.20%)</title><rect x="1156.7" y="533" width="2.4" height="15.0" fill="rgb(252,212,51)" rx="2" ry="2" />
<text  x="1159.69" y="543.5" ></text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (2 samples, 0.40%)</title><rect x="83.8" y="757" width="4.7" height="15.0" fill="rgb(226,88,52)" rx="2" ry="2" />
<text  x="86.75" y="767.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (1 samples, 0.20%)</title><rect x="383.5" y="245" width="2.4" height="15.0" fill="rgb(240,84,7)" rx="2" ry="2" />
<text  x="386.51" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (6 samples, 1.21%)</title><rect x="485.8" y="85" width="14.3" height="15.0" fill="rgb(253,28,54)" rx="2" ry="2" />
<text  x="488.81" y="95.5" ></text>
</g>
<g >
<title>ip6_protocol_deliver_rcu (216 samples, 43.55%)</title><rect x="316.9" y="277" width="513.9" height="15.0" fill="rgb(254,91,7)" rx="2" ry="2" />
<text  x="319.90" y="287.5" >ip6_protocol_deliver_rcu</text>
</g>
<g >
<title>kfree_skbmem (2 samples, 0.40%)</title><rect x="1099.6" y="549" width="4.8" height="15.0" fill="rgb(232,28,27)" rx="2" ry="2" />
<text  x="1102.60" y="559.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.20%)</title><rect x="933.1" y="485" width="2.3" height="15.0" fill="rgb(224,104,37)" rx="2" ry="2" />
<text  x="936.06" y="495.5" ></text>
</g>
<g >
<title>tcp_v6_do_rcv (1 samples, 0.20%)</title><rect x="1097.2" y="293" width="2.4" height="15.0" fill="rgb(232,189,40)" rx="2" ry="2" />
<text  x="1100.22" y="303.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (1 samples, 0.20%)</title><rect x="1159.1" y="613" width="2.4" height="15.0" fill="rgb(244,94,18)" rx="2" ry="2" />
<text  x="1162.07" y="623.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue (49 samples, 9.88%)</title><rect x="664.2" y="197" width="116.6" height="15.0" fill="rgb(222,64,23)" rx="2" ry="2" />
<text  x="667.23" y="207.5" >tcp_clean_rtx_..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.20%)</title><rect x="21.9" y="773" width="2.4" height="15.0" fill="rgb(233,213,42)" rx="2" ry="2" />
<text  x="24.90" y="783.5" ></text>
</g>
<g >
<title>skb_do_copy_data_nocache (6 samples, 1.21%)</title><rect x="961.6" y="533" width="14.3" height="15.0" fill="rgb(242,23,50)" rx="2" ry="2" />
<text  x="964.61" y="543.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.20%)</title><rect x="807.0" y="197" width="2.4" height="15.0" fill="rgb(211,72,1)" rx="2" ry="2" />
<text  x="809.98" y="207.5" ></text>
</g>
<g >
<title>tcp_poll (4 samples, 0.81%)</title><rect x="74.2" y="581" width="9.6" height="15.0" fill="rgb(229,36,7)" rx="2" ry="2" />
<text  x="77.23" y="591.5" ></text>
</g>
<g >
<title>tcp_update_pacing_rate (1 samples, 0.20%)</title><rect x="780.8" y="197" width="2.4" height="15.0" fill="rgb(240,219,18)" rx="2" ry="2" />
<text  x="783.81" y="207.5" ></text>
</g>
<g >
<title>mio::poll::Poll::poll (25 samples, 5.04%)</title><rect x="24.3" y="757" width="59.5" height="15.0" fill="rgb(222,71,4)" rx="2" ry="2" />
<text  x="27.27" y="767.5" >mio::p..</text>
</g>
<g >
<title>_raw_spin_lock_bh (3 samples, 0.60%)</title><rect x="126.6" y="533" width="7.1" height="15.0" fill="rgb(216,124,47)" rx="2" ry="2" />
<text  x="129.57" y="543.5" ></text>
</g>
<g >
<title>loopback_xmit (1 samples, 0.20%)</title><rect x="286.0" y="389" width="2.3" height="15.0" fill="rgb(225,145,28)" rx="2" ry="2" />
<text  x="288.97" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (376 samples, 75.81%)</title><rect x="124.2" y="629" width="894.5" height="15.0" fill="rgb(246,174,40)" rx="2" ry="2" />
<text  x="127.19" y="639.5" >do_syscall_64</text>
</g>
<g >
<title>security_sock_rcv_skb (1 samples, 0.20%)</title><rect x="383.5" y="229" width="2.4" height="15.0" fill="rgb(237,35,45)" rx="2" ry="2" />
<text  x="386.51" y="239.5" ></text>
</g>
<g >
<title>tokio::io::driver::Driver::turn (27 samples, 5.44%)</title><rect x="24.3" y="773" width="64.2" height="15.0" fill="rgb(227,176,7)" rx="2" ry="2" />
<text  x="27.27" y="783.5" >tokio::..</text>
</g>
<g >
<title>__kfree_skb_flush (1 samples, 0.20%)</title><rect x="305.0" y="341" width="2.4" height="15.0" fill="rgb(221,162,38)" rx="2" ry="2" />
<text  x="308.00" y="351.5" ></text>
</g>
<g >
<title>send_call_function_single_ipi (8 samples, 1.61%)</title><rect x="559.6" y="69" width="19.0" height="15.0" fill="rgb(224,142,8)" rx="2" ry="2" />
<text  x="562.56" y="79.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.20%)</title><rect x="19.5" y="853" width="2.4" height="15.0" fill="rgb(231,157,51)" rx="2" ry="2" />
<text  x="22.52" y="863.5" ></text>
</g>
<g >
<title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (388 samples, 78.23%)</title><rect x="102.8" y="725" width="923.0" height="15.0" fill="rgb(242,15,10)" rx="2" ry="2" />
<text  x="105.78" y="735.5" >&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write</text>
</g>
<g >
<title>skb_release_data (1 samples, 0.20%)</title><rect x="1087.7" y="533" width="2.4" height="15.0" fill="rgb(229,134,30)" rx="2" ry="2" />
<text  x="1090.70" y="543.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (1 samples, 0.20%)</title><rect x="1161.5" y="613" width="2.3" height="15.0" fill="rgb(229,208,27)" rx="2" ry="2" />
<text  x="1164.45" y="623.5" ></text>
</g>
<g >
<title>tcp_rate_check_app_limited (2 samples, 0.40%)</title><rect x="990.2" y="533" width="4.7" height="15.0" fill="rgb(238,160,18)" rx="2" ry="2" />
<text  x="993.16" y="543.5" ></text>
</g>
<g >
<title>tokio::io::driver::Inner::is_shutdown (4 samples, 0.81%)</title><rect x="1166.2" y="677" width="9.5" height="15.0" fill="rgb(235,151,25)" rx="2" ry="2" />
<text  x="1169.21" y="687.5" ></text>
</g>
<g >
<title>tcp_chrono_stop (2 samples, 0.40%)</title><rect x="773.7" y="181" width="4.7" height="15.0" fill="rgb(245,43,38)" rx="2" ry="2" />
<text  x="776.67" y="191.5" ></text>
</g>
<g >
<title>ip6_input (1 samples, 0.20%)</title><rect x="1097.2" y="341" width="2.4" height="15.0" fill="rgb(230,151,14)" rx="2" ry="2" />
<text  x="1100.22" y="351.5" ></text>
</g>
<g >
<title>skb_page_frag_refill (11 samples, 2.22%)</title><rect x="899.8" y="517" width="26.1" height="15.0" fill="rgb(248,50,46)" rx="2" ry="2" />
<text  x="902.76" y="527.5" >s..</text>
</g>
<g >
<title>__put_user_nocheck_4 (2 samples, 0.40%)</title><rect x="57.6" y="613" width="4.7" height="15.0" fill="rgb(216,198,23)" rx="2" ry="2" />
<text  x="60.58" y="623.5" ></text>
</g>
<g >
<title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (382 samples, 77.02%)</title><rect x="117.1" y="677" width="908.7" height="15.0" fill="rgb(253,89,1)" rx="2" ry="2" />
<text  x="120.06" y="687.5" >&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (11 samples, 2.22%)</title><rect x="616.7" y="181" width="26.1" height="15.0" fill="rgb(248,92,15)" rx="2" ry="2" />
<text  x="619.65" y="191.5" >_..</text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (491 samples, 98.99%)</title><rect x="21.9" y="853" width="1168.1" height="15.0" fill="rgb(252,35,42)" rx="2" ry="2" />
<text  x="24.90" y="863.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.20%)</title><rect x="1097.2" y="421" width="2.4" height="15.0" fill="rgb(240,81,21)" rx="2" ry="2" />
<text  x="1100.22" y="431.5" ></text>
</g>
<g >
<title>tcp_v6_rcv (1 samples, 0.20%)</title><rect x="1097.2" y="309" width="2.4" height="15.0" fill="rgb(251,160,19)" rx="2" ry="2" />
<text  x="1100.22" y="319.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (6 samples, 1.21%)</title><rect x="961.6" y="517" width="14.3" height="15.0" fill="rgb(249,148,22)" rx="2" ry="2" />
<text  x="964.61" y="527.5" ></text>
</g>
<g >
<title>do_epoll_wait (25 samples, 5.04%)</title><rect x="24.3" y="677" width="59.5" height="15.0" fill="rgb(232,159,3)" rx="2" ry="2" />
<text  x="27.27" y="687.5" >do_epo..</text>
</g>
<g >
<title>__libc_send (381 samples, 76.81%)</title><rect x="119.4" y="661" width="906.4" height="15.0" fill="rgb(228,81,46)" rx="2" ry="2" />
<text  x="122.44" y="671.5" >__libc_send</text>
</g>
<g >
<title>read_tsc (1 samples, 0.20%)</title><rect x="861.7" y="485" width="2.4" height="15.0" fill="rgb(246,57,36)" rx="2" ry="2" />
<text  x="864.69" y="495.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt (4 samples, 0.81%)</title><rect x="764.2" y="181" width="9.5" height="15.0" fill="rgb(241,171,36)" rx="2" ry="2" />
<text  x="767.15" y="191.5" ></text>
</g>
<g >
<title>__list_del_entry_valid (8 samples, 1.61%)</title><rect x="459.6" y="101" width="19.1" height="15.0" fill="rgb(215,27,2)" rx="2" ry="2" />
<text  x="462.64" y="111.5" ></text>
</g>
<g >
<title>process_backlog (1 samples, 0.20%)</title><rect x="1097.2" y="373" width="2.4" height="15.0" fill="rgb(238,175,6)" rx="2" ry="2" />
<text  x="1100.22" y="383.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.20%)</title><rect x="1023.5" y="645" width="2.3" height="15.0" fill="rgb(208,174,46)" rx="2" ry="2" />
<text  x="1026.47" y="655.5" ></text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.20%)</title><rect x="1097.2" y="277" width="2.4" height="15.0" fill="rgb(221,111,50)" rx="2" ry="2" />
<text  x="1100.22" y="287.5" ></text>
</g>
<g >
<title>do_softirq (1 samples, 0.20%)</title><rect x="1097.2" y="469" width="2.4" height="15.0" fill="rgb(213,87,24)" rx="2" ry="2" />
<text  x="1100.22" y="479.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (55 samples, 11.09%)</title><rect x="447.7" y="149" width="130.9" height="15.0" fill="rgb(215,187,14)" rx="2" ry="2" />
<text  x="450.74" y="159.5" >__wake_up_common..</text>
</g>
<g >
<title>begin_new_exec (4 samples, 0.81%)</title><rect x="10.0" y="789" width="9.5" height="15.0" fill="rgb(239,110,15)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (1 samples, 0.20%)</title><rect x="1016.3" y="597" width="2.4" height="15.0" fill="rgb(226,39,8)" rx="2" ry="2" />
<text  x="1019.33" y="607.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.40%)</title><rect x="481.0" y="85" width="4.8" height="15.0" fill="rgb(215,16,25)" rx="2" ry="2" />
<text  x="484.05" y="95.5" ></text>
</g>
<g >
<title>tcp_send_mss (9 samples, 1.81%)</title><rect x="994.9" y="533" width="21.4" height="15.0" fill="rgb(222,118,52)" rx="2" ry="2" />
<text  x="997.92" y="543.5" >t..</text>
</g>
<g >
<title>unroll_tree_refs (1 samples, 0.20%)</title><rect x="1161.5" y="597" width="2.3" height="15.0" fill="rgb(223,225,15)" rx="2" ry="2" />
<text  x="1164.45" y="607.5" ></text>
</g>
<g >
<title>select_task_rq_fair (14 samples, 2.82%)</title><rect x="500.1" y="85" width="33.3" height="15.0" fill="rgb(235,202,24)" rx="2" ry="2" />
<text  x="503.08" y="95.5" >se..</text>
</g>
<g >
<title>tcp_data_ready (1 samples, 0.20%)</title><rect x="799.8" y="213" width="2.4" height="15.0" fill="rgb(229,156,12)" rx="2" ry="2" />
<text  x="802.84" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 0.60%)</title><rect x="833.1" y="309" width="7.2" height="15.0" fill="rgb(213,121,8)" rx="2" ry="2" />
<text  x="836.15" y="319.5" ></text>
</g>
<g >
<title>__inet6_lookup_established (16 samples, 3.23%)</title><rect x="345.4" y="245" width="38.1" height="15.0" fill="rgb(229,24,28)" rx="2" ry="2" />
<text  x="348.44" y="255.5" >__i..</text>
</g>
<g >
<title>__slab_free (16 samples, 3.23%)</title><rect x="688.0" y="149" width="38.1" height="15.0" fill="rgb(223,41,6)" rx="2" ry="2" />
<text  x="691.02" y="159.5" >__s..</text>
</g>
<g >
<title>tcp_update_skb_after_send (2 samples, 0.40%)</title><rect x="845.0" y="485" width="4.8" height="15.0" fill="rgb(247,47,20)" rx="2" ry="2" />
<text  x="848.04" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (52 samples, 10.48%)</title><rect x="1037.7" y="629" width="123.8" height="15.0" fill="rgb(213,193,28)" rx="2" ry="2" />
<text  x="1040.74" y="639.5" >do_syscall_64</text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.20%)</title><rect x="1104.4" y="549" width="2.3" height="15.0" fill="rgb(232,73,53)" rx="2" ry="2" />
<text  x="1107.35" y="559.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (302 samples, 60.89%)</title><rect x="181.3" y="533" width="718.5" height="15.0" fill="rgb(239,117,0)" rx="2" ry="2" />
<text  x="184.29" y="543.5" >__tcp_push_pending_frames</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="19.5" y="917" width="2.4" height="15.0" fill="rgb(224,97,26)" rx="2" ry="2" />
<text  x="22.52" y="927.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1 samples, 0.20%)</title><rect x="973.5" y="501" width="2.4" height="15.0" fill="rgb(225,141,16)" rx="2" ry="2" />
<text  x="976.51" y="511.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (9 samples, 1.81%)</title><rect x="873.6" y="501" width="21.4" height="15.0" fill="rgb(248,146,38)" rx="2" ry="2" />
<text  x="876.59" y="511.5" >t..</text>
</g>
<g >
<title>ip6_finish_output2 (241 samples, 48.59%)</title><rect x="266.9" y="453" width="573.4" height="15.0" fill="rgb(207,149,2)" rx="2" ry="2" />
<text  x="269.94" y="463.5" >ip6_finish_output2</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (25 samples, 5.04%)</title><rect x="24.3" y="725" width="59.5" height="15.0" fill="rgb(222,143,10)" rx="2" ry="2" />
<text  x="27.27" y="735.5" >entry_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.81%)</title><rect x="10.0" y="917" width="9.5" height="15.0" fill="rgb(218,105,48)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>_copy_to_iter (4 samples, 0.81%)</title><rect x="1118.6" y="517" width="9.5" height="15.0" fill="rgb(252,124,22)" rx="2" ry="2" />
<text  x="1121.63" y="527.5" ></text>
</g>
<g >
<title>perf (4 samples, 0.81%)</title><rect x="10.0" y="949" width="9.5" height="15.0" fill="rgb(230,36,40)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>ipv6_rcv (1 samples, 0.20%)</title><rect x="830.8" y="293" width="2.3" height="15.0" fill="rgb(244,166,28)" rx="2" ry="2" />
<text  x="833.77" y="303.5" ></text>
</g>
<g >
<title>dput (1 samples, 0.20%)</title><rect x="19.5" y="821" width="2.4" height="15.0" fill="rgb(246,180,29)" rx="2" ry="2" />
<text  x="22.52" y="831.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (4 samples, 0.81%)</title><rect x="1118.6" y="501" width="9.5" height="15.0" fill="rgb(209,121,53)" rx="2" ry="2" />
<text  x="1121.63" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (50 samples, 10.08%)</title><rect x="1040.1" y="613" width="119.0" height="15.0" fill="rgb(240,89,46)" rx="2" ry="2" />
<text  x="1043.12" y="623.5" >__x64_sys_recv..</text>
</g>
<g >
<title>tcp_stream_memory_free (1 samples, 0.20%)</title><rect x="81.4" y="565" width="2.4" height="15.0" fill="rgb(226,215,17)" rx="2" ry="2" />
<text  x="84.37" y="575.5" ></text>
</g>
<g >
<title>llist_add_batch (5 samples, 1.01%)</title><rect x="547.7" y="53" width="11.9" height="15.0" fill="rgb(236,85,39)" rx="2" ry="2" />
<text  x="550.66" y="63.5" ></text>
</g>
<g >
<title>sock_def_readable (92 samples, 18.55%)</title><rect x="424.0" y="213" width="218.8" height="15.0" fill="rgb(210,55,18)" rx="2" ry="2" />
<text  x="426.95" y="223.5" >sock_def_readable</text>
</g>
<g >
<title>__check_object_size.part.0 (8 samples, 1.61%)</title><rect x="1128.1" y="501" width="19.1" height="15.0" fill="rgb(250,151,0)" rx="2" ry="2" />
<text  x="1131.15" y="511.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.20%)</title><rect x="1156.7" y="501" width="2.4" height="15.0" fill="rgb(242,135,25)" rx="2" ry="2" />
<text  x="1159.69" y="511.5" ></text>
</g>
<g >
<title>sock_poll (9 samples, 1.81%)</title><rect x="62.3" y="597" width="21.5" height="15.0" fill="rgb(237,96,14)" rx="2" ry="2" />
<text  x="65.34" y="607.5" >s..</text>
</g>
<g >
<title>__kmalloc_node_track_caller (3 samples, 0.60%)</title><rect x="928.3" y="501" width="7.1" height="15.0" fill="rgb(250,135,49)" rx="2" ry="2" />
<text  x="931.31" y="511.5" ></text>
</g>
<g >
<title>tokio::main (491 samples, 98.99%)</title><rect x="21.9" y="837" width="1168.1" height="15.0" fill="rgb(253,173,48)" rx="2" ry="2" />
<text  x="24.90" y="847.5" >tokio::main</text>
</g>
<g >
<title>wake_affine_weight (11 samples, 2.22%)</title><rect x="507.2" y="53" width="26.2" height="15.0" fill="rgb(229,146,12)" rx="2" ry="2" />
<text  x="510.22" y="63.5" >w..</text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::Context::park (28 samples, 5.65%)</title><rect x="21.9" y="789" width="66.6" height="15.0" fill="rgb(244,116,10)" rx="2" ry="2" />
<text  x="24.90" y="799.5" >tokio::..</text>
</g>
<g >
<title>do_execveat_common (4 samples, 0.81%)</title><rect x="10.0" y="869" width="9.5" height="15.0" fill="rgb(229,217,51)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.20%)</title><rect x="1156.7" y="517" width="2.4" height="15.0" fill="rgb(210,103,15)" rx="2" ry="2" />
<text  x="1159.69" y="527.5" ></text>
</g>
<g >
<title>perf_event_exec (4 samples, 0.81%)</title><rect x="10.0" y="773" width="9.5" height="15.0" fill="rgb(220,179,4)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (1 samples, 0.20%)</title><rect x="421.6" y="213" width="2.4" height="15.0" fill="rgb(242,88,43)" rx="2" ry="2" />
<text  x="424.57" y="223.5" ></text>
</g>
<g >
<title>__sys_recvfrom (50 samples, 10.08%)</title><rect x="1040.1" y="597" width="119.0" height="15.0" fill="rgb(245,126,54)" rx="2" ry="2" />
<text  x="1043.12" y="607.5" >__sys_recvfrom</text>
</g>
<g >
<title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (4 samples, 0.81%)</title><rect x="1175.7" y="677" width="9.5" height="15.0" fill="rgb(218,113,39)" rx="2" ry="2" />
<text  x="1178.73" y="687.5" ></text>
</g>
<g >
<title>update_cfs_rq_h_load (10 samples, 2.02%)</title><rect x="509.6" y="37" width="23.8" height="15.0" fill="rgb(243,32,33)" rx="2" ry="2" />
<text  x="512.60" y="47.5" >u..</text>
</g>
<g >
<title>__fget_light (1 samples, 0.20%)</title><rect x="24.3" y="661" width="2.4" height="15.0" fill="rgb(226,27,42)" rx="2" ry="2" />
<text  x="27.27" y="671.5" ></text>
</g>
<g >
<title>kfree (25 samples, 5.04%)</title><rect x="683.3" y="165" width="59.4" height="15.0" fill="rgb(250,167,38)" rx="2" ry="2" />
<text  x="686.27" y="175.5" >kfree</text>
</g>
<g >
<title>ip6_rcv_core (1 samples, 0.20%)</title><rect x="830.8" y="277" width="2.3" height="15.0" fill="rgb(236,23,1)" rx="2" ry="2" />
<text  x="833.77" y="287.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (227 samples, 45.77%)</title><rect x="300.2" y="373" width="540.1" height="15.0" fill="rgb(238,153,41)" rx="2" ry="2" />
<text  x="303.24" y="383.5" >__softirqentry_text_start</text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.20%)</title><rect x="19.5" y="869" width="2.4" height="15.0" fill="rgb(233,120,27)" rx="2" ry="2" />
<text  x="22.52" y="879.5" ></text>
</g>
<g >
<title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.20%)</title><rect x="86.1" y="725" width="2.4" height="15.0" fill="rgb(253,20,49)" rx="2" ry="2" />
<text  x="89.13" y="735.5" ></text>
</g>
<g >
<title>wake_affine (11 samples, 2.22%)</title><rect x="507.2" y="69" width="26.2" height="15.0" fill="rgb(221,152,24)" rx="2" ry="2" />
<text  x="510.22" y="79.5" >w..</text>
</g>
<g >
<title>load_elf_binary (4 samples, 0.81%)</title><rect x="10.0" y="805" width="9.5" height="15.0" fill="rgb(216,104,15)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (219 samples, 44.15%)</title><rect x="312.1" y="309" width="521.0" height="15.0" fill="rgb(250,105,19)" rx="2" ry="2" />
<text  x="315.14" y="319.5" >__netif_receive_skb_one_core</text>
</g>
<g >
<title>all (496 samples, 100%)</title><rect x="10.0" y="965" width="1180.0" height="15.0" fill="rgb(237,28,33)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>ep_item_poll (9 samples, 1.81%)</title><rect x="62.3" y="613" width="21.5" height="15.0" fill="rgb(218,6,13)" rx="2" ry="2" />
<text  x="65.34" y="623.5" >e..</text>
</g>
<g >
<title>tokio::runtime::basic_scheduler::BasicScheduler::block_on (491 samples, 98.99%)</title><rect x="21.9" y="821" width="1168.1" height="15.0" fill="rgb(219,149,38)" rx="2" ry="2" />
<text  x="24.90" y="831.5" >tokio::runtime::basic_scheduler::BasicScheduler::block_on</text>
</g>
<g >
<title>net_rx_action (227 samples, 45.77%)</title><rect x="300.2" y="357" width="540.1" height="15.0" fill="rgb(216,44,7)" rx="2" ry="2" />
<text  x="303.24" y="367.5" >net_rx_action</text>
</g>
<g >
<title>skb_copy_datagram_iter (17 samples, 3.43%)</title><rect x="1106.7" y="549" width="40.5" height="15.0" fill="rgb(249,121,5)" rx="2" ry="2" />
<text  x="1109.73" y="559.5" >skb..</text>
</g>
<g >
<title>ip6_output (2 samples, 0.40%)</title><rect x="840.3" y="453" width="4.7" height="15.0" fill="rgb(237,214,41)" rx="2" ry="2" />
<text  x="843.28" y="463.5" ></text>
</g>
<g >
<title>tcp_v6_send_check (4 samples, 0.81%)</title><rect x="849.8" y="485" width="9.5" height="15.0" fill="rgb(212,113,17)" rx="2" ry="2" />
<text  x="852.80" y="495.5" ></text>
</g>
<g >
<title>tcp_check_space (4 samples, 0.81%)</title><rect x="864.1" y="501" width="9.5" height="15.0" fill="rgb(209,124,41)" rx="2" ry="2" />
<text  x="867.07" y="511.5" ></text>
</g>
<g >
<title>tcp_ack (1 samples, 0.20%)</title><rect x="1097.2" y="261" width="2.4" height="15.0" fill="rgb(215,54,39)" rx="2" ry="2" />
<text  x="1100.22" y="271.5" ></text>
</g>
<g >
<title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (58 samples, 11.69%)</title><rect x="1025.8" y="693" width="138.0" height="15.0" fill="rgb(225,18,9)" rx="2" ry="2" />
<text  x="1028.85" y="703.5" >&lt;&amp;mio::net::tcp::..</text>
</g>
<g >
<title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (456 samples, 91.94%)</title><rect x="100.4" y="757" width="1084.8" height="15.0" fill="rgb(221,169,17)" rx="2" ry="2" />
<text  x="103.40" y="767.5" >tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text>
</g>
<g >
<title>__dev_queue_xmit (7 samples, 1.41%)</title><rect x="276.5" y="437" width="16.6" height="15.0" fill="rgb(254,50,23)" rx="2" ry="2" />
<text  x="279.45" y="447.5" ></text>
</g>
<g >
<title>rb_first (1 samples, 0.20%)</title><rect x="897.4" y="485" width="2.4" height="15.0" fill="rgb(234,186,3)" rx="2" ry="2" />
<text  x="900.38" y="495.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.20%)</title><rect x="1097.2" y="437" width="2.4" height="15.0" fill="rgb(248,36,22)" rx="2" ry="2" />
<text  x="1100.22" y="447.5" ></text>
</g>
<g >
<title>xmit_one.constprop.0 (1 samples, 0.20%)</title><rect x="286.0" y="405" width="2.3" height="15.0" fill="rgb(213,223,17)" rx="2" ry="2" />
<text  x="288.97" y="415.5" ></text>
</g>
<g >
<title>validate_xmit_skb (2 samples, 0.40%)</title><rect x="288.3" y="421" width="4.8" height="15.0" fill="rgb(231,214,13)" rx="2" ry="2" />
<text  x="291.35" y="431.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2 samples, 0.40%)</title><rect x="1018.7" y="629" width="4.8" height="15.0" fill="rgb(231,109,35)" rx="2" ry="2" />
<text  x="1021.71" y="639.5" ></text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_ready (9 samples, 1.81%)</title><rect x="1163.8" y="693" width="21.4" height="15.0" fill="rgb(213,149,52)" rx="2" ry="2" />
<text  x="1166.83" y="703.5" >t..</text>
</g>
<g >
<title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (491 samples, 98.99%)</title><rect x="21.9" y="805" width="1168.1" height="15.0" fill="rgb(234,75,2)" rx="2" ry="2" />
<text  x="24.90" y="815.5" >tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text>
</g>
<g >
<title>__local_bh_enable_ip (230 samples, 46.37%)</title><rect x="293.1" y="437" width="547.2" height="15.0" fill="rgb(228,108,13)" rx="2" ry="2" />
<text  x="296.10" y="447.5" >__local_bh_enable_ip</text>
</g>
<g >
<title>sk_stream_alloc_skb (15 samples, 3.02%)</title><rect x="925.9" y="533" width="35.7" height="15.0" fill="rgb(220,125,2)" rx="2" ry="2" />
<text  x="928.93" y="543.5" >sk_..</text>
</g>
<g >
<title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.20%)</title><rect x="86.1" y="741" width="2.4" height="15.0" fill="rgb(239,148,54)" rx="2" ry="2" />
<text  x="89.13" y="751.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.0 (4 samples, 0.81%)</title><rect x="10.0" y="741" width="9.5" height="15.0" fill="rgb(236,117,25)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>rcu_read_unlock_strict (1 samples, 0.20%)</title><rect x="504.8" y="69" width="2.4" height="15.0" fill="rgb(220,36,48)" rx="2" ry="2" />
<text  x="507.84" y="79.5" ></text>
</g>
<g >
<title>__sys_sendto (375 samples, 75.60%)</title><rect x="124.2" y="597" width="892.1" height="15.0" fill="rgb(229,137,37)" rx="2" ry="2" />
<text  x="127.19" y="607.5" >__sys_sendto</text>
</g>
<g >
<title>__smp_call_single_queue (5 samples, 1.01%)</title><rect x="547.7" y="69" width="11.9" height="15.0" fill="rgb(240,25,35)" rx="2" ry="2" />
<text  x="550.66" y="79.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (25 samples, 5.04%)</title><rect x="24.3" y="693" width="59.5" height="15.0" fill="rgb(209,228,30)" rx="2" ry="2" />
<text  x="27.27" y="703.5" >__x64_..</text>
</g>
<g >
<title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.20%)</title><rect x="100.4" y="725" width="2.4" height="15.0" fill="rgb(232,168,9)" rx="2" ry="2" />
<text  x="103.40" y="735.5" ></text>
</g>
<g >
<title>__list_del_entry_valid (1 samples, 0.20%)</title><rect x="754.6" y="181" width="2.4" height="15.0" fill="rgb(230,62,48)" rx="2" ry="2" />
<text  x="757.64" y="191.5" ></text>
</g>
<g >
<title>std::thread::local::LocalKey&lt;T&gt;::with (460 samples, 92.74%)</title><rect x="95.6" y="773" width="1094.4" height="15.0" fill="rgb(207,198,24)" rx="2" ry="2" />
<text  x="98.65" y="783.5" >std::thread::local::LocalKey&lt;T&gt;::with</text>
</g>
<g >
<title>slab_free_freelist_hook.constprop.0 (7 samples, 1.41%)</title><rect x="726.1" y="149" width="16.6" height="15.0" fill="rgb(253,19,32)" rx="2" ry="2" />
<text  x="729.09" y="159.5" ></text>
</g>
<g >
<title>__sk_dst_check (3 samples, 0.60%)</title><rect x="252.7" y="453" width="7.1" height="15.0" fill="rgb(211,220,11)" rx="2" ry="2" />
<text  x="255.66" y="463.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (7 samples, 1.41%)</title><rect x="809.4" y="213" width="16.6" height="15.0" fill="rgb(234,128,49)" rx="2" ry="2" />
<text  x="812.35" y="223.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (369 samples, 74.40%)</title><rect x="138.5" y="549" width="877.8" height="15.0" fill="rgb(229,98,7)" rx="2" ry="2" />
<text  x="141.47" y="559.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_read_io (67 samples, 13.51%)</title><rect x="1025.8" y="709" width="159.4" height="15.0" fill="rgb(252,41,13)" rx="2" ry="2" />
<text  x="1028.85" y="719.5" >tokio::io::driver::r..</text>
</g>
<g >
<title>rb_first (3 samples, 0.60%)</title><rect x="757.0" y="181" width="7.2" height="15.0" fill="rgb(230,188,21)" rx="2" ry="2" />
<text  x="760.02" y="191.5" ></text>
</g>
<g >
<title>__copy_skb_header (1 samples, 0.20%)</title><rect x="231.2" y="469" width="2.4" height="15.0" fill="rgb(215,163,28)" rx="2" ry="2" />
<text  x="234.25" y="479.5" ></text>
</g>
<g >
<title>import_single_range (1 samples, 0.20%)</title><rect x="124.2" y="581" width="2.4" height="15.0" fill="rgb(249,228,37)" rx="2" ry="2" />
<text  x="127.19" y="591.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (227 samples, 45.77%)</title><rect x="300.2" y="405" width="540.1" height="15.0" fill="rgb(215,115,10)" rx="2" ry="2" />
<text  x="303.24" y="415.5" >do_softirq_own_stack</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.81%)</title><rect x="10.0" y="901" width="9.5" height="15.0" fill="rgb(243,156,20)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (1 samples, 0.20%)</title><rect x="807.0" y="213" width="2.4" height="15.0" fill="rgb(208,18,16)" rx="2" ry="2" />
<text  x="809.98" y="223.5" ></text>
</g>
<g >
<title>autoremove_wake_function (50 samples, 10.08%)</title><rect x="459.6" y="117" width="119.0" height="15.0" fill="rgb(225,226,10)" rx="2" ry="2" />
<text  x="462.64" y="127.5" >autoremove_wak..</text>
</g>
<g >
<title>tcp_clean_rtx_queue (1 samples, 0.20%)</title><rect x="1097.2" y="245" width="2.4" height="15.0" fill="rgb(230,42,7)" rx="2" ry="2" />
<text  x="1100.22" y="255.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (1 samples, 0.20%)</title><rect x="286.0" y="421" width="2.3" height="15.0" fill="rgb(247,174,40)" rx="2" ry="2" />
<text  x="288.97" y="431.5" ></text>
</g>
<g >
<title>ep_scan_ready_list.constprop.0 (23 samples, 4.64%)</title><rect x="29.0" y="645" width="54.8" height="15.0" fill="rgb(205,37,24)" rx="2" ry="2" />
<text  x="32.03" y="655.5" >ep_sc..</text>
</g>
<g >
<title>tokio (492 samples, 99.19%)</title><rect x="19.5" y="949" width="1170.5" height="15.0" fill="rgb(223,210,39)" rx="2" ry="2" />
<text  x="22.52" y="959.5" >tokio</text>
</g>
<g >
<title>skb_release_head_state (1 samples, 0.20%)</title><rect x="752.3" y="165" width="2.3" height="15.0" fill="rgb(245,154,11)" rx="2" ry="2" />
<text  x="755.26" y="175.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe.part.0 (1 samples, 0.20%)</title><rect x="897.4" y="501" width="2.4" height="15.0" fill="rgb(209,37,53)" rx="2" ry="2" />
<text  x="900.38" y="511.5" ></text>
</g>
<g >
<title>tcp_v6_inbound_md5_hash (1 samples, 0.20%)</title><rect x="828.4" y="245" width="2.4" height="15.0" fill="rgb(228,170,13)" rx="2" ry="2" />
<text  x="831.39" y="255.5" ></text>
</g>
<g >
<title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (57 samples, 11.49%)</title><rect x="1028.2" y="677" width="135.6" height="15.0" fill="rgb(216,81,30)" rx="2" ry="2" />
<text  x="1031.23" y="687.5" >&lt;&amp;std::net::tcp::..</text>
</g>
<g >
<title>ktime_get (2 samples, 0.40%)</title><rect x="859.3" y="501" width="4.8" height="15.0" fill="rgb(209,133,51)" rx="2" ry="2" />
<text  x="862.31" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (375 samples, 75.60%)</title><rect x="124.2" y="613" width="892.1" height="15.0" fill="rgb(245,133,14)" rx="2" ry="2" />
<text  x="127.19" y="623.5" >__x64_sys_sendto</text>
</g>
<g >
<title>tcp_write_xmit (302 samples, 60.89%)</title><rect x="181.3" y="517" width="718.5" height="15.0" fill="rgb(218,227,8)" rx="2" ry="2" />
<text  x="184.29" y="527.5" >tcp_write_xmit</text>
</g>
<g >
<title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.40%)</title><rect x="1185.2" y="757" width="4.8" height="15.0" fill="rgb(254,163,21)" rx="2" ry="2" />
<text  x="1188.24" y="767.5" ></text>
</g>
<g >
<title>netif_skb_features (1 samples, 0.20%)</title><rect x="290.7" y="405" width="2.4" height="15.0" fill="rgb(239,151,0)" rx="2" ry="2" />
<text  x="293.73" y="415.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.20%)</title><rect x="1161.5" y="629" width="2.3" height="15.0" fill="rgb(240,220,48)" rx="2" ry="2" />
<text  x="1164.45" y="639.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.20%)</title><rect x="19.5" y="933" width="2.4" height="15.0" fill="rgb(253,28,22)" rx="2" ry="2" />
<text  x="22.52" y="943.5" ></text>
</g>
<g >
<title>ip6_mtu (2 samples, 0.40%)</title><rect x="1011.6" y="501" width="4.7" height="15.0" fill="rgb(215,39,29)" rx="2" ry="2" />
<text  x="1014.57" y="511.5" ></text>
</g>
<g >
<title>__list_del_entry_valid (3 samples, 0.60%)</title><rect x="50.4" y="613" width="7.2" height="15.0" fill="rgb(253,90,36)" rx="2" ry="2" />
<text  x="53.44" y="623.5" ></text>
</g>
<g >
<title>inet6_csk_xmit (257 samples, 51.81%)</title><rect x="233.6" y="485" width="611.4" height="15.0" fill="rgb(222,135,9)" rx="2" ry="2" />
<text  x="236.63" y="495.5" >inet6_csk_xmit</text>
</g>
<g >
<title>ip6_input (217 samples, 43.75%)</title><rect x="314.5" y="293" width="516.3" height="15.0" fill="rgb(234,197,8)" rx="2" ry="2" />
<text  x="317.52" y="303.5" >ip6_input</text>
</g>
<g >
<title>__kfree_skb (4 samples, 0.81%)</title><rect x="1087.7" y="549" width="9.5" height="15.0" fill="rgb(231,22,52)" rx="2" ry="2" />
<text  x="1090.70" y="559.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h6cb4ce476e522025 (491 samples, 98.99%)</title><rect x="21.9" y="869" width="1168.1" height="15.0" fill="rgb(214,92,20)" rx="2" ry="2" />
<text  x="24.90" y="879.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h6cb4ce476e522025</text>
</g>
<g >
<title>tcp_event_data_recv (2 samples, 0.40%)</title><rect x="802.2" y="213" width="4.8" height="15.0" fill="rgb(209,70,27)" rx="2" ry="2" />
<text  x="805.22" y="223.5" ></text>
</g>
<g >
<title>__alloc_skb (14 samples, 2.82%)</title><rect x="928.3" y="517" width="33.3" height="15.0" fill="rgb(212,149,2)" rx="2" ry="2" />
<text  x="931.31" y="527.5" >__..</text>
</g>
<g >
<title>tcp_rtt_estimator (4 samples, 0.81%)</title><rect x="764.2" y="165" width="9.5" height="15.0" fill="rgb(228,170,30)" rx="2" ry="2" />
<text  x="767.15" y="175.5" ></text>
</g>
<g >
<title>__ksize (11 samples, 2.22%)</title><rect x="935.4" y="501" width="26.2" height="15.0" fill="rgb(238,193,32)" rx="2" ry="2" />
<text  x="938.44" y="511.5" >_..</text>
</g>
<g >
<title>tcp_rcv_established (186 samples, 37.50%)</title><rect x="385.9" y="229" width="442.5" height="15.0" fill="rgb(245,39,21)" rx="2" ry="2" />
<text  x="388.89" y="239.5" >tcp_rcv_established</text>
</g>
<g >
<title>ep_poll (24 samples, 4.84%)</title><rect x="26.7" y="661" width="57.1" height="15.0" fill="rgb(211,67,14)" rx="2" ry="2" />
<text  x="29.65" y="671.5" >ep_poll</text>
</g>
<g >
<title>tokio::io::driver::registration::Registration::poll_write_io (387 samples, 78.02%)</title><rect x="105.2" y="709" width="920.6" height="15.0" fill="rgb(228,104,1)" rx="2" ry="2" />
<text  x="108.16" y="719.5" >tokio::io::driver::registration::Registration::poll_write_io</text>
</g>
<g >
<title>sk_free (1 samples, 0.20%)</title><rect x="286.0" y="373" width="2.3" height="15.0" fill="rgb(210,167,7)" rx="2" ry="2" />
<text  x="288.97" y="383.5" ></text>
</g>
<g >
<title>ip6_protocol_deliver_rcu (1 samples, 0.20%)</title><rect x="1097.2" y="325" width="2.4" height="15.0" fill="rgb(249,16,26)" rx="2" ry="2" />
<text  x="1100.22" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (491 samples, 98.99%)</title><rect x="21.9" y="917" width="1168.1" height="15.0" fill="rgb(234,111,3)" rx="2" ry="2" />
<text  x="24.90" y="927.5" >__libc_start_main</text>
</g>
<g >
<title>bprm_execve (4 samples, 0.81%)</title><rect x="10.0" y="853" width="9.5" height="15.0" fill="rgb(236,86,4)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>skb_entail (6 samples, 1.21%)</title><rect x="975.9" y="533" width="14.3" height="15.0" fill="rgb(215,44,43)" rx="2" ry="2" />
<text  x="978.89" y="543.5" ></text>
</g>
<g >
<title>_raw_read_unlock_irqrestore (8 samples, 1.61%)</title><rect x="597.6" y="149" width="19.1" height="15.0" fill="rgb(254,196,18)" rx="2" ry="2" />
<text  x="600.62" y="159.5" ></text>
</g>
<g >
<title>ip6_dst_check (2 samples, 0.40%)</title><rect x="255.0" y="437" width="4.8" height="15.0" fill="rgb(235,207,46)" rx="2" ry="2" />
<text  x="258.04" y="447.5" ></text>
</g>
<g >
<title>napi_poll (1 samples, 0.20%)</title><rect x="1097.2" y="389" width="2.4" height="15.0" fill="rgb(228,110,43)" rx="2" ry="2" />
<text  x="1100.22" y="399.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (17 samples, 3.43%)</title><rect x="1106.7" y="533" width="40.5" height="15.0" fill="rgb(238,224,52)" rx="2" ry="2" />
<text  x="1109.73" y="543.5" >__s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (380 samples, 76.61%)</title><rect x="119.4" y="645" width="904.1" height="15.0" fill="rgb(233,11,41)" rx="2" ry="2" />
<text  x="122.44" y="655.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>sk_reset_timer (8 samples, 1.61%)</title><rect x="876.0" y="485" width="19.0" height="15.0" fill="rgb(250,81,17)" rx="2" ry="2" />
<text  x="878.97" y="495.5" ></text>
</g>
<g >
<title>__list_del_entry_valid (1 samples, 0.20%)</title><rect x="847.4" y="469" width="2.4" height="15.0" fill="rgb(214,223,54)" rx="2" ry="2" />
<text  x="850.42" y="479.5" ></text>
</g>
<g >
<title>tcp_current_mss (8 samples, 1.61%)</title><rect x="997.3" y="517" width="19.0" height="15.0" fill="rgb(236,150,44)" rx="2" ry="2" />
<text  x="1000.30" y="527.5" ></text>
</g>
<g >
<title>epoll_wait (25 samples, 5.04%)</title><rect x="24.3" y="741" width="59.5" height="15.0" fill="rgb(225,23,49)" rx="2" ry="2" />
<text  x="27.27" y="751.5" >epoll_..</text>
</g>
<g >
<title>tcp_sendmsg (374 samples, 75.40%)</title><rect x="126.6" y="565" width="889.7" height="15.0" fill="rgb(229,215,54)" rx="2" ry="2" />
<text  x="129.57" y="575.5" >tcp_sendmsg</text>
</g>
</g>
</svg>
